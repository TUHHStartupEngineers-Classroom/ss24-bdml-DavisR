[
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Challenge 1 Machine Learning Fundamentals",
    "section": "",
    "text": "# Challenge\nlibrary(tidyverse)\nlibrary(tidyquant)\nlibrary(broom)\nlibrary(umap)\n\n# Step 1\nsp_500_daily_returns_tbl &lt;- readRDS(\"../../scripts/data/sp_500_prices_tbl.rds\")\n\n# Perform the operations\nsp_500_daily_returns_tbl &lt;- sp_500_daily_returns_tbl %&gt;%\n  # Select the necessary columns\n  select(symbol, date, adjusted) %&gt;%\n  # Filter the data to include only dates from 2018 and beyond\n  filter(as.Date(date) &gt;= as.Date(\"2018-01-01\")) %&gt;%\n  # Group by symbol\n  group_by(symbol) %&gt;%\n  # Compute the lag of 1 day on the adjusted stock price\n  mutate(lag_adjusted = lag(adjusted, 1)) %&gt;%\n  # Remove NA values from the lagging operation\n  filter(!is.na(lag_adjusted)) %&gt;%\n  # Compute the difference between adjusted and the lag\n  mutate(diff = adjusted - lag_adjusted) %&gt;%\n  # Compute the percentage difference\n  mutate(pct_return = (diff / lag_adjusted)) %&gt;%\n  # Select only the symbol, date, and pct_return columns\n  select(symbol, date, pct_return) %&gt;%\n  # Sort by symbol\n  arrange(symbol)\n\n\n# Display the resulting data frame\nsp_500_daily_returns_tbl\n\n\n\n  \n\n\n# Step 2\n# Convert the data frame to the desired format\nstock_date_matrix_tbl &lt;- sp_500_daily_returns_tbl %&gt;%\n  # Spread the date column to wide format with pct_return as values\n  pivot_wider(names_from = date, values_from = pct_return, values_fill = list(pct_return = 0)) %&gt;%\n  ungroup\n\n# Display the resulting data frame\nstock_date_matrix_tbl\n\n\n\n  \n\n\n# Step 3\n# Impute missing values with column means and convert to user-item format\nstock_date_matrix_numeric_imputed &lt;- stock_date_matrix_tbl %&gt;%\n  select(-symbol) \n  #%&gt;% pivot_wider(names_from = date, values_from = pct_return, values_fill = mean, values_fn = list(pct_return = mean))\n\n# Perform K-Means clustering with centers = 4 and nstart = 20\nset.seed(123) # Setting a seed for reproducibility\nkmeans_obj &lt;- kmeans(stock_date_matrix_numeric_imputed, centers = 4, nstart = 20)\n\n# Use glance() to get the tot.withinss\nkmeans_summary &lt;- glance(kmeans_obj)\n\n# Print the tot.withinss\nprint(\"Total within-cluster sum of squares (tot.withinss):\")\n\n#&gt; [1] \"Total within-cluster sum of squares (tot.withinss):\"\n\nprint(kmeans_summary$tot.withinss)\n\n#&gt; [1] 29.20555\n\n# Step 4\nkmeans_mapper &lt;- function(center = 3) {\n  stock_date_matrix_tbl %&gt;%\n    select(-symbol) %&gt;%\n    kmeans(centers = center, nstart = 20)\n}\n\n\n# Create a tibble with column centers from 1 to 30\ncenters_tbl &lt;- tibble(centers = 1:30)\n\n# Add a column named k_means with the kmeans_mapper() output\nk_means_mapped_tbl &lt;- centers_tbl %&gt;%\n  mutate(k_means = map(centers, ~kmeans_mapper(.x)))\n\n# Add a column named glance with the glance() output\nk_means_mapped_tbl &lt;- k_means_mapped_tbl %&gt;%\n  mutate(glance = map(k_means, glance))\n\n# Unnest the glance column\nk_means_mapped_tbl &lt;- k_means_mapped_tbl %&gt;%\n  unnest(glance)\n\n# Visualize Scree Plot\nggplot(k_means_mapped_tbl, aes(x = centers, y = tot.withinss)) +\n  geom_point() +\n  geom_line() +\n  labs(title = \"Scree Plot\") +\n  theme_minimal()\n\n\n\n\n\n\n# Step 5\n# Apply UMAP to stock_date_matrix_tbl\numap_results &lt;- stock_date_matrix_tbl %&gt;%\n  select(-symbol) %&gt;%\n  umap()\n\n# Store UMAP results\numap_results_tbl &lt;- umap_results$layout %&gt;%\n  as_tibble() %&gt;%\n  bind_cols(symbol = stock_date_matrix_tbl$symbol)\n\n#&gt; Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n#&gt; `.name_repair` is omitted as of tibble 2.0.0.\n#&gt; ℹ Using compatibility `.name_repair`.\n\n# Visualize UMAP results\numap_results_tbl %&gt;%\n  ggplot(aes(x = V1, y = V2)) +\n  geom_point(alpha = 0.5) +\n  theme_tq() +\n  labs(title = \"UMAP Projection\")\n\n\n\n\n\n\n# Step 6\nsp_500_index_tbl &lt;- read_rds(\"../../scripts/data/sp_500_index_tbl.rds\")\nk_means_mapped_tbl &lt;- read_rds(\"../../scripts/data/k_means_mapped_tbl.rds\")\numap_results_tbl   &lt;- read_rds(\"../../scripts/data/umap_results_tbl.rds\")\nstock_date_matrix_tbl &lt;- read_rds(\"../../scripts/data/stock_date_matrix_tbl.rds\")\n\n# Get the k_means_obj from the 10th center\nk_means_obj &lt;- k_means_mapped_tbl %&gt;%\n  filter(centers == 10) %&gt;%\n  pull(k_means) %&gt;%\n  pluck(1)\n\n# Extract the cluster assignments from k_means_obj\nk_means_clusters &lt;- k_means_obj$cluster\n\n# Augment the k_means_obj with the stock_date_matrix_tbl\n# Add the clusters to the data\numap_kmeans_results_tbl &lt;- broom::augment(k_means_obj, stock_date_matrix_tbl) %&gt;%\n  select(symbol , .cluster) %&gt;%\n  left_join(umap_results_tbl, by = \"symbol\") %&gt;%\n  left_join(sp_500_index_tbl %&gt;% select(symbol, company, sector), by = \"symbol\")\n\n\n# Plot the K-Means and UMAP results\nggplot(umap_kmeans_results_tbl, aes(V1, V2, color = .cluster)) +\n  geom_point(alpha = 0.5)"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#header-2",
    "href": "content/01_journal/01_tidyverse.html#header-2",
    "title": "Tidyverse",
    "section": "\n2.1 Header 2",
    "text": "2.1 Header 2\nHeader 3\nHeader 4\nHeader 5\nHeader 6"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "1: cgp c\n2: cgp c\n3: cgp b\n4: cgp a\n5: cgp b\n6: cgp a\n7: b\n8: b\n9: b\n10: b or c"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "You can find the challenges in the Journal\nThe scripts used for these challenges can be found in /scripts/"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  },
  {
    "objectID": "content/03_other/06_links.html#r-and-r-studio",
    "href": "content/03_other/06_links.html#r-and-r-studio",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual ."
  },
  {
    "objectID": "content/03_other/06_links.html#additional-r-resources",
    "href": "content/03_other/06_links.html#additional-r-resources",
    "title": "Links",
    "section": "",
    "text": "Google is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "scripts/data/Chapter_1_Challenge.html",
    "href": "scripts/data/Chapter_1_Challenge.html",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "scripts/data/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "scripts/data/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %&gt;% glimpse()\n\nRows: 1,225,765\nColumns: 8\n$ symbol   &lt;chr&gt; \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n$ date     &lt;date&gt; 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n$ open     &lt;dbl&gt; 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n$ high     &lt;dbl&gt; 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n$ low      &lt;dbl&gt; 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n$ close    &lt;dbl&gt; 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n$ volume   &lt;dbl&gt; 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n$ adjusted &lt;dbl&gt; 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n# Apply your data transformation skills!\n\n# Output: sp_500_daily_returns_tbl"
  },
  {
    "objectID": "scripts/data/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "href": "scripts/data/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 2 - Convert to User-Item Format",
    "text": "Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl &lt;- read_rds(\"sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n# A tibble: 141,340 × 3\n   symbol date       pct_return\n   &lt;chr&gt;  &lt;date&gt;          &lt;dbl&gt;\n 1 MSFT   2018-01-03   0.00465 \n 2 MSFT   2018-01-04   0.00880 \n 3 MSFT   2018-01-05   0.0124  \n 4 MSFT   2018-01-08   0.00102 \n 5 MSFT   2018-01-09  -0.000680\n 6 MSFT   2018-01-10  -0.00453 \n 7 MSFT   2018-01-11   0.00296 \n 8 MSFT   2018-01-12   0.0173  \n 9 MSFT   2018-01-16  -0.0140  \n10 MSFT   2018-01-17   0.0203  \n# ℹ 141,330 more rows\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n# Convert to User-Item Format\n\n# Output: stock_date_matrix_tbl"
  },
  {
    "objectID": "scripts/data/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "href": "scripts/data/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 3 - Perform K-Means Clustering",
    "text": "Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl &lt;- read_rds(\"stock_date_matrix_tbl.rds\")\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\nPerform kmeans() with centers = 4 and nstart = 20\nSave the result as kmeans_obj\n\n\n# Create kmeans_obj for 4 centers\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss"
  },
  {
    "objectID": "scripts/data/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "href": "scripts/data/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 4 - Find the optimal value of K",
    "text": "Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper &lt;- function(center = 3) {\n    stock_date_matrix_tbl %&gt;%\n        select(-symbol) %&gt;%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n# Use purrr to map\n\n\n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "scripts/data/Chapter_1_Challenge.html#step-5---apply-umap",
    "href": "scripts/data/Chapter_1_Challenge.html#step-5---apply-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 5 - Apply UMAP",
    "text": "Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(\"k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n# Apply UMAP\n\n# Store results as: umap_results \n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\nConvert from a matrix data type to a tibble with as_tibble()\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\n\n# Output: umap_results_tbl\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "scripts/data/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "href": "scripts/data/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 6 - Combine K-Means and UMAP",
    "text": "Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(\"k_means_mapped_tbl.rds\")\numap_results_tbl   &lt;- read_rds(\"umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\n\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %&gt;% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\n\n\n# Output: umap_kmeans_results_tbl \n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\nUse ggplot() mapping V1, V2 and color = .cluster\nAdd the geom_point() geometry with alpha = 0.5\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %&gt;% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\n\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "content/01_journal/01_ml_fundamentals.html",
    "href": "content/01_journal/01_ml_fundamentals.html",
    "title": "Machine Learning Fundamentals",
    "section": "",
    "text": "# Challenge\nlibrary(tidyverse)\nlibrary(tidyquant)\nlibrary(broom)\nlibrary(umap)\n\n# Step 1\nsp_500_daily_returns_tbl &lt;- readRDS(\"../../scripts/data/sp_500_prices_tbl.rds\")\n\n# Perform the operations\nsp_500_daily_returns_tbl &lt;- sp_500_daily_returns_tbl %&gt;%\n  # Select the necessary columns\n  select(symbol, date, adjusted) %&gt;%\n  # Filter the data to include only dates from 2018 and beyond\n  filter(as.Date(date) &gt;= as.Date(\"2018-01-01\")) %&gt;%\n  # Group by symbol\n  group_by(symbol) %&gt;%\n  # Compute the lag of 1 day on the adjusted stock price\n  mutate(lag_adjusted = lag(adjusted, 1)) %&gt;%\n  # Remove NA values from the lagging operation\n  filter(!is.na(lag_adjusted)) %&gt;%\n  # Compute the difference between adjusted and the lag\n  mutate(diff = adjusted - lag_adjusted) %&gt;%\n  # Compute the percentage difference\n  mutate(pct_return = (diff / lag_adjusted)) %&gt;%\n  # Select only the symbol, date, and pct_return columns\n  select(symbol, date, pct_return) %&gt;%\n  # Sort by symbol\n  arrange(symbol)\n\n\n# Display the resulting data frame\nsp_500_daily_returns_tbl\n\n\n\n  \n\n\n# Step 2\n# Convert the data frame to the desired format\nstock_date_matrix_tbl &lt;- sp_500_daily_returns_tbl %&gt;%\n  # Spread the date column to wide format with pct_return as values\n  pivot_wider(names_from = date, values_from = pct_return, values_fill = list(pct_return = 0)) %&gt;%\n  ungroup\n\n# Display the resulting data frame\nstock_date_matrix_tbl\n\n\n\n  \n\n\n# Step 3\n# Impute missing values with column means and convert to user-item format\nstock_date_matrix_numeric_imputed &lt;- stock_date_matrix_tbl %&gt;%\n  select(-symbol) \n  #%&gt;% pivot_wider(names_from = date, values_from = pct_return, values_fill = mean, values_fn = list(pct_return = mean))\n\n# Perform K-Means clustering with centers = 4 and nstart = 20\nset.seed(123) # Setting a seed for reproducibility\nkmeans_obj &lt;- kmeans(stock_date_matrix_numeric_imputed, centers = 4, nstart = 20)\n\n# Use glance() to get the tot.withinss\nkmeans_summary &lt;- glance(kmeans_obj)\n\n# Print the tot.withinss\nprint(\"Total within-cluster sum of squares (tot.withinss):\")\n\n#&gt; [1] \"Total within-cluster sum of squares (tot.withinss):\"\n\nprint(kmeans_summary$tot.withinss)\n\n#&gt; [1] 29.20555\n\n# Step 4\nkmeans_mapper &lt;- function(center = 3) {\n  stock_date_matrix_tbl %&gt;%\n    select(-symbol) %&gt;%\n    kmeans(centers = center, nstart = 20)\n}\n\n\n# Create a tibble with column centers from 1 to 30\ncenters_tbl &lt;- tibble(centers = 1:30)\n\n# Add a column named k_means with the kmeans_mapper() output\nk_means_mapped_tbl &lt;- centers_tbl %&gt;%\n  mutate(k_means = map(centers, ~kmeans_mapper(.x)))\n\n# Add a column named glance with the glance() output\nk_means_mapped_tbl &lt;- k_means_mapped_tbl %&gt;%\n  mutate(glance = map(k_means, glance))\n\n# Unnest the glance column\nk_means_mapped_tbl &lt;- k_means_mapped_tbl %&gt;%\n  unnest(glance)\n\n# Visualize Scree Plot\nggplot(k_means_mapped_tbl, aes(x = centers, y = tot.withinss)) +\n  geom_point() +\n  geom_line() +\n  labs(title = \"Scree Plot\") +\n  theme_minimal()\n\n\n\n\n\n\n# Step 5\n# Apply UMAP to stock_date_matrix_tbl\numap_results &lt;- stock_date_matrix_tbl %&gt;%\n  select(-symbol) %&gt;%\n  umap()\n\n# Store UMAP results\numap_results_tbl &lt;- umap_results$layout %&gt;%\n  as_tibble() %&gt;%\n  bind_cols(symbol = stock_date_matrix_tbl$symbol)\n\n#&gt; Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n#&gt; `.name_repair` is omitted as of tibble 2.0.0.\n#&gt; ℹ Using compatibility `.name_repair`.\n\n# Visualize UMAP results\numap_results_tbl %&gt;%\n  ggplot(aes(x = V1, y = V2)) +\n  geom_point(alpha = 0.5) +\n  theme_tq() +\n  labs(title = \"UMAP Projection\")\n\n\n\n\n\n\n# Step 6\nsp_500_index_tbl &lt;- read_rds(\"../../scripts/data/sp_500_index_tbl.rds\")\nk_means_mapped_tbl &lt;- read_rds(\"../../scripts/data/k_means_mapped_tbl.rds\")\numap_results_tbl   &lt;- read_rds(\"../../scripts/data/umap_results_tbl.rds\")\nstock_date_matrix_tbl &lt;- read_rds(\"../../scripts/data/stock_date_matrix_tbl.rds\")\n\n# Get the k_means_obj from the 10th center\nk_means_obj &lt;- k_means_mapped_tbl %&gt;%\n  filter(centers == 10) %&gt;%\n  pull(k_means) %&gt;%\n  pluck(1)\n\n# Extract the cluster assignments from k_means_obj\nk_means_clusters &lt;- k_means_obj$cluster\n\n# Augment the k_means_obj with the stock_date_matrix_tbl\n# Add the clusters to the data\numap_kmeans_results_tbl &lt;- broom::augment(k_means_obj, stock_date_matrix_tbl) %&gt;%\n  select(symbol , .cluster) %&gt;%\n  left_join(umap_results_tbl, by = \"symbol\") %&gt;%\n  left_join(sp_500_index_tbl %&gt;% select(symbol, company, sector), by = \"symbol\")\n\n\n# Plot the K-Means and UMAP results\nggplot(umap_kmeans_results_tbl, aes(V1, V2, color = .cluster)) +\n  geom_point(alpha = 0.5)"
  },
  {
    "objectID": "content/01_journal/07_explain_black_box_with_lime.html",
    "href": "content/01_journal/07_explain_black_box_with_lime.html",
    "title": "Explaining Black-Box Models With LIME",
    "section": "",
    "text": "# LIME FEATURE EXPLANATION ----\n\n# 1. Setup ----\n\n# Load Libraries \n\nlibrary(h2o)\nlibrary(recipes)\nlibrary(readxl)\nlibrary(tidyverse)\nlibrary(tidyquant)\nlibrary(lime)\nlibrary(readr)\nlibrary(rsample)\n\n\n# Load Data\nemployee_attrition_tbl &lt;- read_csv(\"../../scripts/data/datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\n\n#&gt; Rows: 1470 Columns: 35\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr  (9): Attrition, BusinessTravel, Department, EducationField, Gender, Job...\n#&gt; dbl (26): Age, DailyRate, DistanceFromHome, Education, EmployeeCount, Employ...\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndefinitions_raw_tbl    &lt;- read_excel(\"../../scripts/data/data_definitions.xlsx\", sheet = 1, col_names = FALSE)\n\n#&gt; New names:\n#&gt; • `` -&gt; `...1`\n#&gt; • `` -&gt; `...2`\n\n# Processing Pipeline\nsource(\"../../scripts/data/data_processing_pipeline.R\")\n\nemployee_attrition_readable_tbl &lt;- process_hr_data_readable(employee_attrition_tbl, definitions_raw_tbl)\n\n#&gt; Joining with `by = join_by(Education)`\n#&gt; Joining with `by = join_by(EnvironmentSatisfaction)`\n#&gt; Joining with `by = join_by(JobInvolvement)`\n#&gt; Joining with `by = join_by(JobSatisfaction)`\n#&gt; Joining with `by = join_by(PerformanceRating)`\n#&gt; Joining with `by = join_by(RelationshipSatisfaction)`\n#&gt; Joining with `by = join_by(WorkLifeBalance)`\n\n# Split into test and train\nset.seed(seed = 1113)\nsplit_obj &lt;- rsample::initial_split(employee_attrition_readable_tbl, prop = 0.85)\n\n# Assign training and test data\ntrain_readable_tbl &lt;- training(split_obj)\ntest_readable_tbl  &lt;- testing(split_obj)\n\nrecipe_obj &lt;- recipe(Attrition ~ ., data = train_readable_tbl) %&gt;%\n  step_zv(all_predictors()) %&gt;%\n  step_mutate_at(c(\"JobLevel\", \"StockOptionLevel\"), fn = as.factor) %&gt;%\n  prep()\n\nrecipe_obj\n\n#&gt; \n#&gt; ── Recipe ──────────────────────────────────────────────────────────────────────\n#&gt; \n#&gt; ── Inputs \n#&gt; Number of variables by role\n#&gt; outcome:    1\n#&gt; predictor: 34\n#&gt; \n#&gt; ── Training information \n#&gt; Training data contained 1249 data points and no incomplete rows.\n#&gt; \n#&gt; ── Operations \n#&gt; • Zero variance filter removed: EmployeeCount and Over18, ... | Trained\n#&gt; • Variable mutation for: JobLevel and StockOptionLevel | Trained\n\ntrain_tbl &lt;- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  &lt;- bake(recipe_obj, new_data = test_readable_tbl)\n\n\n\n\n# 2. Models ----\n\nh2o.init()\n\n#&gt; \n#&gt; H2O is not running yet, starting it now...\n#&gt; \n#&gt; Note:  In case of errors look at the following log files:\n#&gt;     C:\\Users\\Davis-PC\\AppData\\Local\\Temp\\RtmpkznvLD\\file6d941bb758a1/h2o_Davis_started_from_r.out\n#&gt;     C:\\Users\\Davis-PC\\AppData\\Local\\Temp\\RtmpkznvLD\\file6d9477d16aa4/h2o_Davis_started_from_r.err\n#&gt; \n#&gt; \n#&gt; Starting H2O JVM and connecting:  Connection successful!\n#&gt; \n#&gt; R is connected to the H2O cluster: \n#&gt;     H2O cluster uptime:         2 seconds 855 milliseconds \n#&gt;     H2O cluster timezone:       Europe/Berlin \n#&gt;     H2O data parsing timezone:  UTC \n#&gt;     H2O cluster version:        3.44.0.3 \n#&gt;     H2O cluster version age:    6 months and 5 days \n#&gt;     H2O cluster name:           H2O_started_from_R_Davis_drs368 \n#&gt;     H2O cluster total nodes:    1 \n#&gt;     H2O cluster total memory:   7.98 GB \n#&gt;     H2O cluster total cores:    20 \n#&gt;     H2O cluster allowed cores:  20 \n#&gt;     H2O cluster healthy:        TRUE \n#&gt;     H2O Connection ip:          localhost \n#&gt;     H2O Connection port:        54321 \n#&gt;     H2O Connection proxy:       NA \n#&gt;     H2O Internal Security:      FALSE \n#&gt;     R Version:                  R version 4.3.3 (2024-02-29 ucrt)\n\n\n#&gt; Warning in h2o.clusterInfo(): \n#&gt; Your H2O cluster version is (6 months and 5 days) old. There may be a newer version available.\n#&gt; Please download and install the latest version from: https://h2o-release.s3.amazonaws.com/h2o/latest_stable.html\n\nautoml_leader &lt;- h2o.loadModel(\"../../scripts/data/h2o_models/DeepLearning_grid_1_AutoML_1_20240622_153440_model_1\")\nautoml_leader\n\n#&gt; Model Details:\n#&gt; ==============\n#&gt; \n#&gt; H2OBinomialModel: deeplearning\n#&gt; Model ID:  DeepLearning_grid_1_AutoML_1_20240622_153440_model_1 \n#&gt; Status of Neuron Layers: predicting Attrition, 2-class classification, bernoulli distribution, CrossEntropy loss, 1.962 weights/biases, 33,3 KB, 9.310 training samples, mini-batch size 1\n#&gt;   layer units             type dropout       l1       l2 mean_rate rate_rms\n#&gt; 1     1    95            Input 10.00 %       NA       NA        NA       NA\n#&gt; 2     2    20 RectifierDropout  0.00 % 0.000000 0.000000  0.173053 0.386098\n#&gt; 3     3     2          Softmax      NA 0.000000 0.000000  0.003560 0.006065\n#&gt;   momentum mean_weight weight_rms mean_bias bias_rms\n#&gt; 1       NA          NA         NA        NA       NA\n#&gt; 2 0.000000    0.000639   0.126888  0.503054 0.052989\n#&gt; 3 0.000000   -0.032795   1.057629 -0.007708 0.000102\n#&gt; \n#&gt; \n#&gt; H2OBinomialMetrics: deeplearning\n#&gt; ** Reported on training data. **\n#&gt; ** Metrics reported on full training frame **\n#&gt; \n#&gt; MSE:  0.07087868\n#&gt; RMSE:  0.2662305\n#&gt; LogLoss:  0.2694876\n#&gt; Mean Per-Class Error:  0.1745662\n#&gt; AUC:  0.9065758\n#&gt; AUCPR:  0.7661669\n#&gt; Gini:  0.8131516\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;         No Yes    Error      Rate\n#&gt; No     879  30 0.033003   =30/909\n#&gt; Yes     49 106 0.316129   =49/155\n#&gt; Totals 928 136 0.074248  =79/1064\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold      value idx\n#&gt; 1                       max f1  0.186026   0.728522 131\n#&gt; 2                       max f2  0.090162   0.729927 187\n#&gt; 3                 max f0point5  0.255262   0.770465 113\n#&gt; 4                 max accuracy  0.186026   0.925752 131\n#&gt; 5                max precision  0.997067   1.000000   0\n#&gt; 6                   max recall  0.000314   1.000000 394\n#&gt; 7              max specificity  0.997067   1.000000   0\n#&gt; 8             max absolute_mcc  0.186026   0.687697 131\n#&gt; 9   max min_per_class_accuracy  0.052992   0.825806 235\n#&gt; 10 max mean_per_class_accuracy  0.090162   0.841992 187\n#&gt; 11                     max tns  0.997067 909.000000   0\n#&gt; 12                     max fns  0.997067 154.000000   0\n#&gt; 13                     max fps  0.000017 909.000000 399\n#&gt; 14                     max tps  0.000314 155.000000 394\n#&gt; 15                     max tnr  0.997067   1.000000   0\n#&gt; 16                     max fnr  0.997067   0.993548   0\n#&gt; 17                     max fpr  0.000017   1.000000 399\n#&gt; 18                     max tpr  0.000314   1.000000 394\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; H2OBinomialMetrics: deeplearning\n#&gt; ** Reported on validation data. **\n#&gt; ** Metrics reported on full validation frame **\n#&gt; \n#&gt; MSE:  0.1307555\n#&gt; RMSE:  0.3616014\n#&gt; LogLoss:  0.5095701\n#&gt; Mean Per-Class Error:  0.2560866\n#&gt; AUC:  0.8272467\n#&gt; AUCPR:  0.6287858\n#&gt; Gini:  0.6544934\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;         No Yes    Error     Rate\n#&gt; No     122  25 0.170068  =25/147\n#&gt; Yes     13  25 0.342105   =13/38\n#&gt; Totals 135  50 0.205405  =38/185\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold      value idx\n#&gt; 1                       max f1  0.070984   0.568182  49\n#&gt; 2                       max f2  0.011837   0.681818  89\n#&gt; 3                 max f0point5  0.354880   0.660377  16\n#&gt; 4                 max accuracy  0.354880   0.854054  16\n#&gt; 5                max precision  0.997236   1.000000   0\n#&gt; 6                   max recall  0.000458   1.000000 147\n#&gt; 7              max specificity  0.997236   1.000000   0\n#&gt; 8             max absolute_mcc  0.328621   0.489111  18\n#&gt; 9   max min_per_class_accuracy  0.030573   0.736842  65\n#&gt; 10 max mean_per_class_accuracy  0.018816   0.751432  76\n#&gt; 11                     max tns  0.997236 147.000000   0\n#&gt; 12                     max fns  0.997236  37.000000   0\n#&gt; 13                     max fps  0.000001 147.000000 184\n#&gt; 14                     max tps  0.000458  38.000000 147\n#&gt; 15                     max tnr  0.997236   1.000000   0\n#&gt; 16                     max fnr  0.997236   0.973684   0\n#&gt; 17                     max fpr  0.000001   1.000000 184\n#&gt; 18                     max tpr  0.000458   1.000000 147\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; H2OBinomialMetrics: deeplearning\n#&gt; ** Reported on cross-validation data. **\n#&gt; ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#&gt; \n#&gt; MSE:  0.1434779\n#&gt; RMSE:  0.3787848\n#&gt; LogLoss:  1.717677\n#&gt; Mean Per-Class Error:  0.3311012\n#&gt; AUC:  0.7357394\n#&gt; AUCPR:  0.3992677\n#&gt; Gini:  0.4714788\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;         No Yes    Error       Rate\n#&gt; No     829  80 0.088009    =80/909\n#&gt; Yes     89  66 0.574194    =89/155\n#&gt; Totals 918 146 0.158835  =169/1064\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold      value idx\n#&gt; 1                       max f1  0.071589   0.438538 138\n#&gt; 2                       max f2  0.000002   0.528169 355\n#&gt; 3                 max f0point5  0.995865   0.459610  43\n#&gt; 4                 max accuracy  0.995865   0.868421  43\n#&gt; 5                max precision  1.000000   0.857143   0\n#&gt; 6                   max recall  0.000000   1.000000 399\n#&gt; 7              max specificity  1.000000   0.998900   0\n#&gt; 8             max absolute_mcc  0.071589   0.346343 138\n#&gt; 9   max min_per_class_accuracy  0.000002   0.677419 355\n#&gt; 10 max mean_per_class_accuracy  0.000029   0.692040 295\n#&gt; 11                     max tns  1.000000 908.000000   0\n#&gt; 12                     max fns  1.000000 149.000000   0\n#&gt; 13                     max fps  0.000000 909.000000 399\n#&gt; 14                     max tps  0.000000 155.000000 399\n#&gt; 15                     max tnr  1.000000   0.998900   0\n#&gt; 16                     max fnr  1.000000   0.961290   0\n#&gt; 17                     max fpr  0.000000   1.000000 399\n#&gt; 18                     max tpr  0.000000   1.000000 399\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; Cross-Validation Metrics Summary: \n#&gt;                              mean       sd cv_1_valid cv_2_valid cv_3_valid\n#&gt; accuracy                 0.861852 0.018274   0.845070   0.845070   0.887324\n#&gt; auc                      0.803406 0.048768   0.730885   0.852613   0.836674\n#&gt; err                      0.138148 0.018274   0.154930   0.154930   0.112676\n#&gt; err_count               29.400000 3.911521  33.000000  33.000000  24.000000\n#&gt; f0point5                 0.530462 0.076929   0.445860   0.530303   0.655738\n#&gt; f1                       0.523352 0.045683   0.459016   0.560000   0.571429\n#&gt; f2                       0.521239 0.047936   0.472973   0.593220   0.506329\n#&gt; lift_top_group           5.906300 0.815216   4.896552   6.264706   6.264706\n#&gt; logloss                  0.476307 0.111504   0.422271   0.417649   0.458768\n#&gt; max_per_class_error      0.477916 0.063070   0.517241   0.382353   0.529412\n#&gt; mcc                      0.447547 0.058397   0.369469   0.469989   0.526002\n#&gt; mean_per_class_accuracy  0.720934 0.024558   0.692466   0.752958   0.718534\n#&gt; mean_per_class_error     0.279066 0.024558   0.307534   0.247042   0.281466\n#&gt; mse                      0.105194 0.001969   0.105181   0.104028   0.102781\n#&gt; pr_auc                   0.516358 0.095565   0.402161   0.609393   0.601468\n#&gt; precision                0.538842 0.110070   0.437500   0.512195   0.727273\n#&gt; r2                       0.148383 0.080100   0.105701   0.224509   0.233806\n#&gt; recall                   0.522084 0.063070   0.482759   0.617647   0.470588\n#&gt; rmse                     0.324325 0.003033   0.324317   0.322533   0.320594\n#&gt; specificity              0.919784 0.029561   0.902174   0.888268   0.966480\n#&gt;                         cv_4_valid cv_5_valid\n#&gt; accuracy                  0.859155   0.872641\n#&gt; auc                       0.780042   0.816817\n#&gt; err                       0.140845   0.127359\n#&gt; err_count                30.000000  27.000000\n#&gt; f0point5                  0.510204   0.510204\n#&gt; f1                        0.500000   0.526316\n#&gt; f2                        0.490196   0.543478\n#&gt; lift_top_group            6.870968   5.234568\n#&gt; logloss                   0.672923   0.409926\n#&gt; max_per_class_error       0.516129   0.444444\n#&gt; mcc                       0.418454   0.453821\n#&gt; mean_per_class_accuracy   0.703474   0.737237\n#&gt; mean_per_class_error      0.296526   0.262763\n#&gt; mse                       0.107958   0.106023\n#&gt; pr_auc                    0.537043   0.431724\n#&gt; precision                 0.517241   0.500000\n#&gt; r2                        0.131878   0.046023\n#&gt; recall                    0.483871   0.555556\n#&gt; rmse                      0.328570   0.325612\n#&gt; specificity               0.923077   0.918919\n\n# Convert data frames to H2O frames\ntrain_h2o &lt;- as.h2o(train_tbl)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntest_h2o &lt;- as.h2o(test_tbl)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# 3. LIME ----\n\n# 3.1 Making Predictions ----\n\n# Making Predictions\n\npredictions_tbl &lt;- automl_leader %&gt;% \n  h2o.predict(newdata = as.h2o(test_tbl)) %&gt;%\n  as.tibble() %&gt;%\n  bind_cols(\n    test_tbl %&gt;%\n      select(Attrition, EmployeeNumber)\n  )\n\n#&gt; Warning: `as.tibble()` was deprecated in tibble 2.0.0.\n#&gt; ℹ Please use `as_tibble()` instead.\n#&gt; ℹ The signature and semantics have changed, see `?as_tibble`.\n\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\npredictions_tbl\n\n\n\n  \n\n\ntest_tbl %&gt;%\n  slice(1) %&gt;%\n  glimpse()\n\n#&gt; Rows: 1\n#&gt; Columns: 32\n#&gt; $ Age                      &lt;dbl&gt; 59\n#&gt; $ BusinessTravel           &lt;fct&gt; Travel_Rarely\n#&gt; $ DailyRate                &lt;dbl&gt; 1324\n#&gt; $ Department               &lt;fct&gt; Research & Development\n#&gt; $ DistanceFromHome         &lt;dbl&gt; 3\n#&gt; $ Education                &lt;fct&gt; Bachelor\n#&gt; $ EducationField           &lt;fct&gt; Medical\n#&gt; $ EmployeeNumber           &lt;dbl&gt; 10\n#&gt; $ EnvironmentSatisfaction  &lt;fct&gt; High\n#&gt; $ Gender                   &lt;fct&gt; Female\n#&gt; $ HourlyRate               &lt;dbl&gt; 81\n#&gt; $ JobInvolvement           &lt;fct&gt; Very High\n#&gt; $ JobLevel                 &lt;fct&gt; 1\n#&gt; $ JobRole                  &lt;fct&gt; Laboratory Technician\n#&gt; $ JobSatisfaction          &lt;fct&gt; Low\n#&gt; $ MaritalStatus            &lt;fct&gt; Married\n#&gt; $ MonthlyIncome            &lt;dbl&gt; 2670\n#&gt; $ MonthlyRate              &lt;dbl&gt; 9964\n#&gt; $ NumCompaniesWorked       &lt;dbl&gt; 4\n#&gt; $ OverTime                 &lt;fct&gt; Yes\n#&gt; $ PercentSalaryHike        &lt;dbl&gt; 20\n#&gt; $ PerformanceRating        &lt;fct&gt; Outstanding\n#&gt; $ RelationshipSatisfaction &lt;fct&gt; Low\n#&gt; $ StockOptionLevel         &lt;fct&gt; 3\n#&gt; $ TotalWorkingYears        &lt;dbl&gt; 12\n#&gt; $ TrainingTimesLastYear    &lt;dbl&gt; 3\n#&gt; $ WorkLifeBalance          &lt;fct&gt; Good\n#&gt; $ YearsAtCompany           &lt;dbl&gt; 1\n#&gt; $ YearsInCurrentRole       &lt;dbl&gt; 0\n#&gt; $ YearsSinceLastPromotion  &lt;dbl&gt; 0\n#&gt; $ YearsWithCurrManager     &lt;dbl&gt; 0\n#&gt; $ Attrition                &lt;fct&gt; No\n\n# 3.2 Single Explanation ----\n\nexplainer &lt;- train_tbl %&gt;%\n  select(-Attrition) %&gt;%\n  lime(\n    model           = automl_leader,\n    bin_continuous  = TRUE,\n    n_bins          = 4,\n    quantile_bins   = TRUE\n  )\n\nexplainer\n\n#&gt; $model\n#&gt; Model Details:\n#&gt; ==============\n#&gt; \n#&gt; H2OBinomialModel: deeplearning\n#&gt; Model ID:  DeepLearning_grid_1_AutoML_1_20240622_153440_model_1 \n#&gt; Status of Neuron Layers: predicting Attrition, 2-class classification, bernoulli distribution, CrossEntropy loss, 1.962 weights/biases, 33,3 KB, 9.310 training samples, mini-batch size 1\n#&gt;   layer units             type dropout       l1       l2 mean_rate rate_rms\n#&gt; 1     1    95            Input 10.00 %       NA       NA        NA       NA\n#&gt; 2     2    20 RectifierDropout  0.00 % 0.000000 0.000000  0.173053 0.386098\n#&gt; 3     3     2          Softmax      NA 0.000000 0.000000  0.003560 0.006065\n#&gt;   momentum mean_weight weight_rms mean_bias bias_rms\n#&gt; 1       NA          NA         NA        NA       NA\n#&gt; 2 0.000000    0.000639   0.126888  0.503054 0.052989\n#&gt; 3 0.000000   -0.032795   1.057629 -0.007708 0.000102\n#&gt; \n#&gt; \n#&gt; H2OBinomialMetrics: deeplearning\n#&gt; ** Reported on training data. **\n#&gt; ** Metrics reported on full training frame **\n#&gt; \n#&gt; MSE:  0.07087868\n#&gt; RMSE:  0.2662305\n#&gt; LogLoss:  0.2694876\n#&gt; Mean Per-Class Error:  0.1745662\n#&gt; AUC:  0.9065758\n#&gt; AUCPR:  0.7661669\n#&gt; Gini:  0.8131516\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;         No Yes    Error      Rate\n#&gt; No     879  30 0.033003   =30/909\n#&gt; Yes     49 106 0.316129   =49/155\n#&gt; Totals 928 136 0.074248  =79/1064\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold      value idx\n#&gt; 1                       max f1  0.186026   0.728522 131\n#&gt; 2                       max f2  0.090162   0.729927 187\n#&gt; 3                 max f0point5  0.255262   0.770465 113\n#&gt; 4                 max accuracy  0.186026   0.925752 131\n#&gt; 5                max precision  0.997067   1.000000   0\n#&gt; 6                   max recall  0.000314   1.000000 394\n#&gt; 7              max specificity  0.997067   1.000000   0\n#&gt; 8             max absolute_mcc  0.186026   0.687697 131\n#&gt; 9   max min_per_class_accuracy  0.052992   0.825806 235\n#&gt; 10 max mean_per_class_accuracy  0.090162   0.841992 187\n#&gt; 11                     max tns  0.997067 909.000000   0\n#&gt; 12                     max fns  0.997067 154.000000   0\n#&gt; 13                     max fps  0.000017 909.000000 399\n#&gt; 14                     max tps  0.000314 155.000000 394\n#&gt; 15                     max tnr  0.997067   1.000000   0\n#&gt; 16                     max fnr  0.997067   0.993548   0\n#&gt; 17                     max fpr  0.000017   1.000000 399\n#&gt; 18                     max tpr  0.000314   1.000000 394\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; H2OBinomialMetrics: deeplearning\n#&gt; ** Reported on validation data. **\n#&gt; ** Metrics reported on full validation frame **\n#&gt; \n#&gt; MSE:  0.1307555\n#&gt; RMSE:  0.3616014\n#&gt; LogLoss:  0.5095701\n#&gt; Mean Per-Class Error:  0.2560866\n#&gt; AUC:  0.8272467\n#&gt; AUCPR:  0.6287858\n#&gt; Gini:  0.6544934\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;         No Yes    Error     Rate\n#&gt; No     122  25 0.170068  =25/147\n#&gt; Yes     13  25 0.342105   =13/38\n#&gt; Totals 135  50 0.205405  =38/185\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold      value idx\n#&gt; 1                       max f1  0.070984   0.568182  49\n#&gt; 2                       max f2  0.011837   0.681818  89\n#&gt; 3                 max f0point5  0.354880   0.660377  16\n#&gt; 4                 max accuracy  0.354880   0.854054  16\n#&gt; 5                max precision  0.997236   1.000000   0\n#&gt; 6                   max recall  0.000458   1.000000 147\n#&gt; 7              max specificity  0.997236   1.000000   0\n#&gt; 8             max absolute_mcc  0.328621   0.489111  18\n#&gt; 9   max min_per_class_accuracy  0.030573   0.736842  65\n#&gt; 10 max mean_per_class_accuracy  0.018816   0.751432  76\n#&gt; 11                     max tns  0.997236 147.000000   0\n#&gt; 12                     max fns  0.997236  37.000000   0\n#&gt; 13                     max fps  0.000001 147.000000 184\n#&gt; 14                     max tps  0.000458  38.000000 147\n#&gt; 15                     max tnr  0.997236   1.000000   0\n#&gt; 16                     max fnr  0.997236   0.973684   0\n#&gt; 17                     max fpr  0.000001   1.000000 184\n#&gt; 18                     max tpr  0.000458   1.000000 147\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; H2OBinomialMetrics: deeplearning\n#&gt; ** Reported on cross-validation data. **\n#&gt; ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#&gt; \n#&gt; MSE:  0.1434779\n#&gt; RMSE:  0.3787848\n#&gt; LogLoss:  1.717677\n#&gt; Mean Per-Class Error:  0.3311012\n#&gt; AUC:  0.7357394\n#&gt; AUCPR:  0.3992677\n#&gt; Gini:  0.4714788\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;         No Yes    Error       Rate\n#&gt; No     829  80 0.088009    =80/909\n#&gt; Yes     89  66 0.574194    =89/155\n#&gt; Totals 918 146 0.158835  =169/1064\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold      value idx\n#&gt; 1                       max f1  0.071589   0.438538 138\n#&gt; 2                       max f2  0.000002   0.528169 355\n#&gt; 3                 max f0point5  0.995865   0.459610  43\n#&gt; 4                 max accuracy  0.995865   0.868421  43\n#&gt; 5                max precision  1.000000   0.857143   0\n#&gt; 6                   max recall  0.000000   1.000000 399\n#&gt; 7              max specificity  1.000000   0.998900   0\n#&gt; 8             max absolute_mcc  0.071589   0.346343 138\n#&gt; 9   max min_per_class_accuracy  0.000002   0.677419 355\n#&gt; 10 max mean_per_class_accuracy  0.000029   0.692040 295\n#&gt; 11                     max tns  1.000000 908.000000   0\n#&gt; 12                     max fns  1.000000 149.000000   0\n#&gt; 13                     max fps  0.000000 909.000000 399\n#&gt; 14                     max tps  0.000000 155.000000 399\n#&gt; 15                     max tnr  1.000000   0.998900   0\n#&gt; 16                     max fnr  1.000000   0.961290   0\n#&gt; 17                     max fpr  0.000000   1.000000 399\n#&gt; 18                     max tpr  0.000000   1.000000 399\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; Cross-Validation Metrics Summary: \n#&gt;                              mean       sd cv_1_valid cv_2_valid cv_3_valid\n#&gt; accuracy                 0.861852 0.018274   0.845070   0.845070   0.887324\n#&gt; auc                      0.803406 0.048768   0.730885   0.852613   0.836674\n#&gt; err                      0.138148 0.018274   0.154930   0.154930   0.112676\n#&gt; err_count               29.400000 3.911521  33.000000  33.000000  24.000000\n#&gt; f0point5                 0.530462 0.076929   0.445860   0.530303   0.655738\n#&gt; f1                       0.523352 0.045683   0.459016   0.560000   0.571429\n#&gt; f2                       0.521239 0.047936   0.472973   0.593220   0.506329\n#&gt; lift_top_group           5.906300 0.815216   4.896552   6.264706   6.264706\n#&gt; logloss                  0.476307 0.111504   0.422271   0.417649   0.458768\n#&gt; max_per_class_error      0.477916 0.063070   0.517241   0.382353   0.529412\n#&gt; mcc                      0.447547 0.058397   0.369469   0.469989   0.526002\n#&gt; mean_per_class_accuracy  0.720934 0.024558   0.692466   0.752958   0.718534\n#&gt; mean_per_class_error     0.279066 0.024558   0.307534   0.247042   0.281466\n#&gt; mse                      0.105194 0.001969   0.105181   0.104028   0.102781\n#&gt; pr_auc                   0.516358 0.095565   0.402161   0.609393   0.601468\n#&gt; precision                0.538842 0.110070   0.437500   0.512195   0.727273\n#&gt; r2                       0.148383 0.080100   0.105701   0.224509   0.233806\n#&gt; recall                   0.522084 0.063070   0.482759   0.617647   0.470588\n#&gt; rmse                     0.324325 0.003033   0.324317   0.322533   0.320594\n#&gt; specificity              0.919784 0.029561   0.902174   0.888268   0.966480\n#&gt;                         cv_4_valid cv_5_valid\n#&gt; accuracy                  0.859155   0.872641\n#&gt; auc                       0.780042   0.816817\n#&gt; err                       0.140845   0.127359\n#&gt; err_count                30.000000  27.000000\n#&gt; f0point5                  0.510204   0.510204\n#&gt; f1                        0.500000   0.526316\n#&gt; f2                        0.490196   0.543478\n#&gt; lift_top_group            6.870968   5.234568\n#&gt; logloss                   0.672923   0.409926\n#&gt; max_per_class_error       0.516129   0.444444\n#&gt; mcc                       0.418454   0.453821\n#&gt; mean_per_class_accuracy   0.703474   0.737237\n#&gt; mean_per_class_error      0.296526   0.262763\n#&gt; mse                       0.107958   0.106023\n#&gt; pr_auc                    0.537043   0.431724\n#&gt; precision                 0.517241   0.500000\n#&gt; r2                        0.131878   0.046023\n#&gt; recall                    0.483871   0.555556\n#&gt; rmse                      0.328570   0.325612\n#&gt; specificity               0.923077   0.918919\n#&gt; \n#&gt; $preprocess\n#&gt; function (x) \n#&gt; x\n#&gt; &lt;bytecode: 0x0000028bfab44720&gt;\n#&gt; &lt;environment: 0x0000028bfab32b60&gt;\n#&gt; \n#&gt; $bin_continuous\n#&gt; [1] TRUE\n#&gt; \n#&gt; $n_bins\n#&gt; [1] 4\n#&gt; \n#&gt; $quantile_bins\n#&gt; [1] TRUE\n#&gt; \n#&gt; $use_density\n#&gt; [1] TRUE\n#&gt; \n#&gt; $feature_type\n#&gt;                      Age           BusinessTravel                DailyRate \n#&gt;                \"numeric\"                 \"factor\"                \"numeric\" \n#&gt;               Department         DistanceFromHome                Education \n#&gt;                 \"factor\"                \"numeric\"                 \"factor\" \n#&gt;           EducationField           EmployeeNumber  EnvironmentSatisfaction \n#&gt;                 \"factor\"                \"numeric\"                 \"factor\" \n#&gt;                   Gender               HourlyRate           JobInvolvement \n#&gt;                 \"factor\"                \"numeric\"                 \"factor\" \n#&gt;                 JobLevel                  JobRole          JobSatisfaction \n#&gt;                 \"factor\"                 \"factor\"                 \"factor\" \n#&gt;            MaritalStatus            MonthlyIncome              MonthlyRate \n#&gt;                 \"factor\"                \"numeric\"                \"numeric\" \n#&gt;       NumCompaniesWorked                 OverTime        PercentSalaryHike \n#&gt;                \"numeric\"                 \"factor\"                \"numeric\" \n#&gt;        PerformanceRating RelationshipSatisfaction         StockOptionLevel \n#&gt;                 \"factor\"                 \"factor\"                 \"factor\" \n#&gt;        TotalWorkingYears    TrainingTimesLastYear          WorkLifeBalance \n#&gt;                \"numeric\"                \"numeric\"                 \"factor\" \n#&gt;           YearsAtCompany       YearsInCurrentRole  YearsSinceLastPromotion \n#&gt;                \"numeric\"                \"numeric\"                \"numeric\" \n#&gt;     YearsWithCurrManager \n#&gt;                \"numeric\" \n#&gt; \n#&gt; $bin_cuts\n#&gt; $bin_cuts$Age\n#&gt;   0%  25%  50%  75% 100% \n#&gt;   18   30   36   43   60 \n#&gt; \n#&gt; $bin_cuts$BusinessTravel\n#&gt; NULL\n#&gt; \n#&gt; $bin_cuts$DailyRate\n#&gt;   0%  25%  50%  75% 100% \n#&gt;  102  465  797 1147 1499 \n#&gt; \n#&gt; $bin_cuts$Department\n#&gt; NULL\n#&gt; \n#&gt; $bin_cuts$DistanceFromHome\n#&gt;   0%  25%  50%  75% 100% \n#&gt;    1    2    7   14   29 \n#&gt; \n#&gt; $bin_cuts$Education\n#&gt; NULL\n#&gt; \n#&gt; $bin_cuts$EducationField\n#&gt; NULL\n#&gt; \n#&gt; $bin_cuts$EmployeeNumber\n#&gt;   0%  25%  50%  75% 100% \n#&gt;    1  511 1040 1573 2065 \n#&gt; \n#&gt; $bin_cuts$EnvironmentSatisfaction\n#&gt; NULL\n#&gt; \n#&gt; $bin_cuts$Gender\n#&gt; NULL\n#&gt; \n#&gt; $bin_cuts$HourlyRate\n#&gt;   0%  25%  50%  75% 100% \n#&gt;   30   49   66   83  100 \n#&gt; \n#&gt; $bin_cuts$JobInvolvement\n#&gt; NULL\n#&gt; \n#&gt; $bin_cuts$JobLevel\n#&gt; NULL\n#&gt; \n#&gt; $bin_cuts$JobRole\n#&gt; NULL\n#&gt; \n#&gt; $bin_cuts$JobSatisfaction\n#&gt; NULL\n#&gt; \n#&gt; $bin_cuts$MaritalStatus\n#&gt; NULL\n#&gt; \n#&gt; $bin_cuts$MonthlyIncome\n#&gt;    0%   25%   50%   75%  100% \n#&gt;  1051  2929  4908  8474 19999 \n#&gt; \n#&gt; $bin_cuts$MonthlyRate\n#&gt;    0%   25%   50%   75%  100% \n#&gt;  2094  8423 14470 20689 26968 \n#&gt; \n#&gt; $bin_cuts$NumCompaniesWorked\n#&gt;   0%  25%  50%  75% 100% \n#&gt;    0    1    2    4    9 \n#&gt; \n#&gt; $bin_cuts$OverTime\n#&gt; NULL\n#&gt; \n#&gt; $bin_cuts$PercentSalaryHike\n#&gt;   0%  25%  50%  75% 100% \n#&gt;   11   12   14   18   25 \n#&gt; \n#&gt; $bin_cuts$PerformanceRating\n#&gt; NULL\n#&gt; \n#&gt; $bin_cuts$RelationshipSatisfaction\n#&gt; NULL\n#&gt; \n#&gt; $bin_cuts$StockOptionLevel\n#&gt; NULL\n#&gt; \n#&gt; $bin_cuts$TotalWorkingYears\n#&gt;   0%  25%  50%  75% 100% \n#&gt;    0    6   10   15   38 \n#&gt; \n#&gt; $bin_cuts$TrainingTimesLastYear\n#&gt;   0%  25%  50% 100% \n#&gt;    0    2    3    6 \n#&gt; \n#&gt; $bin_cuts$WorkLifeBalance\n#&gt; NULL\n#&gt; \n#&gt; $bin_cuts$YearsAtCompany\n#&gt;   0%  25%  50%  75% 100% \n#&gt;    0    3    5    9   37 \n#&gt; \n#&gt; $bin_cuts$YearsInCurrentRole\n#&gt;   0%  25%  50%  75% 100% \n#&gt;    0    2    3    7   18 \n#&gt; \n#&gt; $bin_cuts$YearsSinceLastPromotion\n#&gt;   0%  50%  75% 100% \n#&gt;    0    1    2   15 \n#&gt; \n#&gt; $bin_cuts$YearsWithCurrManager\n#&gt;   0%  25%  50%  75% 100% \n#&gt;    0    2    3    7   17 \n#&gt; \n#&gt; \n#&gt; $feature_distribution\n#&gt; $feature_distribution$Age\n#&gt; \n#&gt;         1         2         3         4 \n#&gt; 0.2602082 0.2834267 0.2217774 0.2345877 \n#&gt; \n#&gt; $feature_distribution$BusinessTravel\n#&gt; \n#&gt;        Non-Travel     Travel_Rarely Travel_Frequently \n#&gt;         0.1000801         0.7181745         0.1817454 \n#&gt; \n#&gt; $feature_distribution$DailyRate\n#&gt; \n#&gt;         1         2         3         4 \n#&gt; 0.2514011 0.2489992 0.2497998 0.2497998 \n#&gt; \n#&gt; $feature_distribution$Department\n#&gt; \n#&gt;        Human Resources Research & Development                  Sales \n#&gt;             0.04323459             0.65092074             0.30584468 \n#&gt; \n#&gt; $feature_distribution$DistanceFromHome\n#&gt; \n#&gt;         1         2         3         4 \n#&gt; 0.2954363 0.2369896 0.2241793 0.2433947 \n#&gt; \n#&gt; $feature_distribution$Education\n#&gt; \n#&gt; Below College       College      Bachelor        Master        Doctor \n#&gt;    0.11689351    0.18895116    0.38510809    0.27461970    0.03442754 \n#&gt; \n#&gt; $feature_distribution$EducationField\n#&gt; \n#&gt;  Human Resources    Life Sciences        Marketing          Medical \n#&gt;       0.01761409       0.41793435       0.10888711       0.31144916 \n#&gt;            Other Technical Degree \n#&gt;       0.05444355       0.08967174 \n#&gt; \n#&gt; $feature_distribution$EmployeeNumber\n#&gt; \n#&gt;         1         2         3         4 \n#&gt; 0.2506005 0.2497998 0.2497998 0.2497998 \n#&gt; \n#&gt; $feature_distribution$EnvironmentSatisfaction\n#&gt; \n#&gt;       Low    Medium      High Very High \n#&gt; 0.1913531 0.1961569 0.3018415 0.3106485 \n#&gt; \n#&gt; $feature_distribution$Gender\n#&gt; \n#&gt;    Female      Male \n#&gt; 0.4123299 0.5876701 \n#&gt; \n#&gt; $feature_distribution$HourlyRate\n#&gt; \n#&gt;         1         2         3         4 \n#&gt; 0.2618094 0.2473979 0.2449960 0.2457966 \n#&gt; \n#&gt; $feature_distribution$JobInvolvement\n#&gt; \n#&gt;        Low     Medium       High  Very High \n#&gt; 0.05684548 0.25780624 0.58927142 0.09607686 \n#&gt; \n#&gt; $feature_distribution$JobLevel\n#&gt; \n#&gt;          1          2          3          4          5 \n#&gt; 0.36829464 0.36509207 0.14651721 0.07526021 0.04483587 \n#&gt; \n#&gt; $feature_distribution$JobRole\n#&gt; \n#&gt; Healthcare Representative           Human Resources     Laboratory Technician \n#&gt;                0.08646918                0.03682946                0.18174540 \n#&gt;                   Manager    Manufacturing Director         Research Director \n#&gt;                0.06885508                0.09927942                0.05924740 \n#&gt;        Research Scientist           Sales Executive      Sales Representative \n#&gt;                0.18654924                0.22337870                0.05764612 \n#&gt; \n#&gt; $feature_distribution$JobSatisfaction\n#&gt; \n#&gt;       Low    Medium      High Very High \n#&gt; 0.1873499 0.1985588 0.3018415 0.3122498 \n#&gt; \n#&gt; $feature_distribution$MaritalStatus\n#&gt; \n#&gt;    Single   Married  Divorced \n#&gt; 0.3306645 0.4571657 0.2121697 \n#&gt; \n#&gt; $feature_distribution$MonthlyIncome\n#&gt; \n#&gt;         1         2         3         4 \n#&gt; 0.2506005 0.2497998 0.2497998 0.2497998 \n#&gt; \n#&gt; $feature_distribution$MonthlyRate\n#&gt; \n#&gt;         1         2         3         4 \n#&gt; 0.2506005 0.2497998 0.2497998 0.2497998 \n#&gt; \n#&gt; $feature_distribution$NumCompaniesWorked\n#&gt; \n#&gt;          1          2          3          4 \n#&gt; 0.48118495 0.09927942 0.20496397 0.21457166 \n#&gt; \n#&gt; $feature_distribution$OverTime\n#&gt; \n#&gt;        No       Yes \n#&gt; 0.7165733 0.2834267 \n#&gt; \n#&gt; $feature_distribution$PercentSalaryHike\n#&gt; \n#&gt;         1         2         3         4 \n#&gt; 0.2866293 0.2738191 0.2289832 0.2105685 \n#&gt; \n#&gt; $feature_distribution$PerformanceRating\n#&gt; \n#&gt;         Low        Good   Excellent Outstanding \n#&gt;   0.0000000   0.0000000   0.8414732   0.1585268 \n#&gt; \n#&gt; $feature_distribution$RelationshipSatisfaction\n#&gt; \n#&gt;       Low    Medium      High Very High \n#&gt; 0.1889512 0.2161729 0.3018415 0.2930344 \n#&gt; \n#&gt; $feature_distribution$StockOptionLevel\n#&gt; \n#&gt;          0          1          2          3 \n#&gt; 0.43554844 0.40592474 0.10168135 0.05684548 \n#&gt; \n#&gt; $feature_distribution$TotalWorkingYears\n#&gt; \n#&gt;         1         2         3         4 \n#&gt; 0.3050440 0.3306645 0.1224980 0.2417934 \n#&gt; \n#&gt; $feature_distribution$TrainingTimesLastYear\n#&gt; \n#&gt;         1         2         3 \n#&gt; 0.4603683 0.3306645 0.2089672 \n#&gt; \n#&gt; $feature_distribution$WorkLifeBalance\n#&gt; \n#&gt;        Bad       Good     Better       Best \n#&gt; 0.05204163 0.22497998 0.61889512 0.10408327 \n#&gt; \n#&gt; $feature_distribution$YearsAtCompany\n#&gt; \n#&gt;         1         2         3         4 \n#&gt; 0.3226581 0.2137710 0.2217774 0.2417934 \n#&gt; \n#&gt; $feature_distribution$YearsInCurrentRole\n#&gt; \n#&gt;          1          2          3          4 \n#&gt; 0.46757406 0.08726982 0.27542034 0.16973579 \n#&gt; \n#&gt; $feature_distribution$YearsSinceLastPromotion\n#&gt; \n#&gt;         1         2         3 \n#&gt; 0.6413131 0.1120897 0.2465973 \n#&gt; \n#&gt; $feature_distribution$YearsWithCurrManager\n#&gt; \n#&gt;          1          2          3          4 \n#&gt; 0.46357086 0.09767814 0.25300240 0.18574860 \n#&gt; \n#&gt; \n#&gt; attr(,\"class\")\n#&gt; [1] \"data_frame_explainer\" \"explainer\"            \"list\"\n\nexplanation &lt;- test_tbl %&gt;%\n  slice(1) %&gt;%\n  select(-Attrition) %&gt;%\n  lime::explain(\n    \n    # Pass our explainer object\n    explainer = explainer,\n    # Because it is a binary classification model: 1\n    n_labels   = 1,\n    # number of features to be returned\n    n_features = 8,\n    # number of localized linear models\n    n_permutations = 5000,\n    # Let's start with 1\n    kernel_width   = 1\n  )\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nexplanation\n\n\n\n  \n\n\nexplanation %&gt;%\n  as.tibble() %&gt;%\n  select(feature:prediction) \n\n\n\n  \n\n\ng &lt;- plot_features(explanation = explanation, ncol = 1)\ng\n\n\n\n\n\n\n# 3.3 Multiple Explanations ----\n\nexplanation &lt;- test_tbl %&gt;%\n  slice(1:20) %&gt;%\n  select(-Attrition) %&gt;%\n  lime::explain(\n    explainer = explainer,\n    n_labels   = 1,\n    n_features = 8,\n    n_permutations = 5000,\n    kernel_width   = 0.5\n  )\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n\n#&gt; Warning in `[&lt;-.factor`(`*tmp*`, ri, value = c(1, 1, 5, 2, 1, 2, 4, 26)):\n#&gt; ungültiges Faktorniveau, NA erzeugt\n\n\n#&gt; Warning in `[&lt;-.factor`(`*tmp*`, ri, value = c(1, 4, 0, 2, 1, 1, 1, 2)):\n#&gt; ungültiges Faktorniveau, NA erzeugt\n#&gt; Warning in `[&lt;-.factor`(`*tmp*`, ri, value = c(1, 4, 0, 2, 1, 1, 1, 2)):\n#&gt; ungültiges Faktorniveau, NA erzeugt\n#&gt; Warning in `[&lt;-.factor`(`*tmp*`, ri, value = c(1, 4, 0, 2, 1, 1, 1, 2)):\n#&gt; ungültiges Faktorniveau, NA erzeugt\n#&gt; Warning in `[&lt;-.factor`(`*tmp*`, ri, value = c(1, 4, 0, 2, 1, 1, 1, 2)):\n#&gt; ungültiges Faktorniveau, NA erzeugt\n#&gt; Warning in `[&lt;-.factor`(`*tmp*`, ri, value = c(1, 4, 0, 2, 1, 1, 1, 2)):\n#&gt; ungültiges Faktorniveau, NA erzeugt\n#&gt; Warning in `[&lt;-.factor`(`*tmp*`, ri, value = c(1, 4, 0, 2, 1, 1, 1, 2)):\n#&gt; ungültiges Faktorniveau, NA erzeugt\n#&gt; Warning in `[&lt;-.factor`(`*tmp*`, ri, value = c(1, 4, 0, 2, 1, 1, 1, 2)):\n#&gt; ungültiges Faktorniveau, NA erzeugt\n#&gt; Warning in `[&lt;-.factor`(`*tmp*`, ri, value = c(1, 4, 0, 2, 1, 1, 1, 2)):\n#&gt; ungültiges Faktorniveau, NA erzeugt\n#&gt; Warning in `[&lt;-.factor`(`*tmp*`, ri, value = c(1, 4, 0, 2, 1, 1, 1, 2)):\n#&gt; ungültiges Faktorniveau, NA erzeugt\n#&gt; Warning in `[&lt;-.factor`(`*tmp*`, ri, value = c(1, 4, 0, 2, 1, 1, 1, 2)):\n#&gt; ungültiges Faktorniveau, NA erzeugt\n#&gt; Warning in `[&lt;-.factor`(`*tmp*`, ri, value = c(1, 4, 0, 2, 1, 1, 1, 2)):\n#&gt; ungültiges Faktorniveau, NA erzeugt\n#&gt; Warning in `[&lt;-.factor`(`*tmp*`, ri, value = c(1, 4, 0, 2, 1, 1, 1, 2)):\n#&gt; ungültiges Faktorniveau, NA erzeugt\n#&gt; Warning in `[&lt;-.factor`(`*tmp*`, ri, value = c(1, 4, 0, 2, 1, 1, 1, 2)):\n#&gt; ungültiges Faktorniveau, NA erzeugt\n#&gt; Warning in `[&lt;-.factor`(`*tmp*`, ri, value = c(1, 4, 0, 2, 1, 1, 1, 2)):\n#&gt; ungültiges Faktorniveau, NA erzeugt\n#&gt; Warning in `[&lt;-.factor`(`*tmp*`, ri, value = c(1, 4, 0, 2, 1, 1, 1, 2)):\n#&gt; ungültiges Faktorniveau, NA erzeugt\n\nexplanation %&gt;%\n  as.tibble()\n\n\n\n  \n\n\nplot_features(explanation, ncol = 4)\n\n\n\n\n\n\nplot_explanations(explanation)\n\n\n\n\n\n\n# Challenge\n\n# Custom plot function for a single case\nplot_features_custom &lt;- function(explanation_data, case_id = 1) {\n  case_data &lt;- explanation_data %&gt;% filter(case == case_id)\n  \n  case_data %&gt;%\n    mutate(feature_desc = factor(feature_desc, levels = rev(feature_desc)),  # Ensure correct ordering\n           label = ifelse(feature_weight &gt; 0, \"Supports\", \"Contradicts\"),\n           color = ifelse(label == \"Supports\", \"#4682b4\", \"#b22222\")) %&gt;%\n    ggplot(aes(x = feature_desc, y = feature_weight, fill = label)) +\n    geom_col(color = \"black\") +\n    coord_flip() +\n    labs(x = \"Feature\", y = \"Weight\") +\n    scale_fill_manual(values = c(\"Supports\" = \"#4682b4\", \"Contradicts\" = \"#b22222\")) +\n    theme_minimal() +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels for better readability\n    #geom_text(aes(label = feature_weight), position = position_stack(vjust = 0.5), color = \"white\") +\n    ggtitle(paste0(\"Case: \", case_id, \"\\n\",\n                   \"Label: \", unique(case_data$label), \"\\n\",\n                   \"Probability: \", round(unique(case_data$label_prob), 2), \"\\n\",\n                   \"Explanation Fit: \", round(unique(case_data$model_r2), 2))) +\n    theme(plot.title = element_text(hjust = 0.5, face = \"bold\", size = 12))\n}\n\n# Example usage with your explanation data\nplot_features_custom(explanation, case_id = 1)\n\n\n\n\n\n\n# Define a custom plot function for plot_explanations()\nplot_explanations_custom &lt;- function(explanation, ...) {\n  explanation$feature_desc &lt;- factor(\n    explanation$feature_desc,\n    levels = rev(unique(\n      explanation$feature_desc[\n        order(explanation$feature, explanation$feature_value)\n        ]))\n  )\n\n  num_cases &lt;- unique(suppressWarnings(as.numeric(explanation$case)))\n  if (!anyNA(num_cases)) {\n    explanation$case &lt;- factor(explanation$case, levels = as.character(sort(num_cases)))\n  }\n  p &lt;- ggplot(explanation, aes_(~case, ~feature_desc)) +\n    geom_tile(aes_(fill = ~feature_weight)) +\n    scale_fill_gradient2('Feature\\nweight', low = '#b22222', mid = 'white', high = '#4682b4') +\n    scale_x_discrete('Case', expand = c(0, 0)) +\n    scale_y_discrete('Feature', expand = c(0, 0)) +\n    theme_light() +\n    theme(panel.border = element_rect(fill = NA, colour = 'grey', size = 1),\n          panel.grid = element_blank(),\n          axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))\n  p + facet_wrap(~label)\n}\n\n# Use this function with your explanation data\nplot_explanations_custom(explanation)\n\n#&gt; Warning: `aes_()` was deprecated in ggplot2 3.0.0.\n#&gt; ℹ Please use tidy evaluation idioms with `aes()`\n\n\n#&gt; Warning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\n#&gt; ℹ Please use the `linewidth` argument instead."
  },
  {
    "objectID": "content/01_journal/05_automated_ML_with_H2O_2.html",
    "href": "content/01_journal/05_automated_ML_with_H2O_2.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/06_performance_measures.html",
    "href": "content/01_journal/06_performance_measures.html",
    "title": "Performance Measures",
    "section": "",
    "text": "# Load necessary libraries\nlibrary(tidyverse)\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.4     ✔ readr     2.1.5\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.1\n#&gt; ✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n#&gt; ✔ purrr     1.0.2     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(readr)\nlibrary(rsample)\nlibrary(h2o)\n\n#&gt; \n#&gt; ----------------------------------------------------------------------\n#&gt; \n#&gt; Your next step is to start H2O:\n#&gt;     &gt; h2o.init()\n#&gt; \n#&gt; For H2O package documentation, ask for help:\n#&gt;     &gt; ??h2o\n#&gt; \n#&gt; After starting H2O, you can use the Web UI at http://localhost:54321\n#&gt; For more information visit https://docs.h2o.ai\n#&gt; \n#&gt; ----------------------------------------------------------------------\n#&gt; \n#&gt; \n#&gt; Attache Paket: 'h2o'\n#&gt; \n#&gt; Die folgenden Objekte sind maskiert von 'package:lubridate':\n#&gt; \n#&gt;     day, hour, month, week, year\n#&gt; \n#&gt; Die folgenden Objekte sind maskiert von 'package:stats':\n#&gt; \n#&gt;     cor, sd, var\n#&gt; \n#&gt; Die folgenden Objekte sind maskiert von 'package:base':\n#&gt; \n#&gt;     %*%, %in%, &&, ||, apply, as.factor, as.numeric, colnames,\n#&gt;     colnames&lt;-, ifelse, is.character, is.factor, is.numeric, log,\n#&gt;     log10, log1p, log2, round, signif, trunc\n\nlibrary(cowplot)\n\n#&gt; \n#&gt; Attache Paket: 'cowplot'\n#&gt; \n#&gt; Das folgende Objekt ist maskiert 'package:lubridate':\n#&gt; \n#&gt;     stamp\n\nlibrary(glue)\n\n# Functions\ntheme_new &lt;- theme(\n  legend.position  = \"bottom\",\n  legend.key       = element_blank(),,\n  panel.background = element_rect(fill   = \"transparent\"),\n  panel.border     = element_rect(color = \"black\", fill = NA, size = 0.5),\n  panel.grid.major = element_line(color = \"grey\", size = 0.333)\n) \n\n#&gt; Warning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\n#&gt; ℹ Please use the `linewidth` argument instead.\n\n\n#&gt; Warning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\n#&gt; ℹ Please use the `linewidth` argument instead.\n\nplot_h2o_performance &lt;- function(h2o_leaderboard, newdata, order_by = c(\"auc\", \"logloss\"),\n                                 max_models = 3, size = 1.5) {\n  \n  # Inputs\n  \n  leaderboard_tbl &lt;- h2o_leaderboard %&gt;%\n    as_tibble() %&gt;%\n    slice(1:max_models)\n  \n  newdata_tbl &lt;- newdata %&gt;%\n    as_tibble()\n  \n  # Selecting the first, if nothing is provided\n  order_by      &lt;- tolower(order_by[[1]]) \n  \n  # Convert string stored in a variable to column name (symbol)\n  order_by_expr &lt;- rlang::sym(order_by)\n  \n  # Turn of the progress bars ( opposite h2o.show_progress())\n  h2o.no_progress()\n  \n  # 1. Model metrics\n  \n  get_model_performance_metrics &lt;- function(model_id, test_tbl) {\n    \n    model_h2o &lt;- h2o.getModel(model_id)\n    perf_h2o  &lt;- h2o.performance(model_h2o, newdata = as.h2o(test_tbl))\n    \n    perf_h2o %&gt;%\n      h2o.metric() %&gt;%\n      as.tibble() %&gt;%\n      select(threshold, tpr, fpr, precision, recall)\n    \n  }\n  \n  model_metrics_tbl &lt;- leaderboard_tbl %&gt;%\n    mutate(metrics = map(model_id, get_model_performance_metrics, newdata_tbl)) %&gt;%\n    unnest(cols = metrics) %&gt;%\n    mutate(\n      model_id = as_factor(model_id) %&gt;% \n        # programmatically reorder factors depending on order_by\n        fct_reorder(!! order_by_expr, \n                    .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n      auc      = auc %&gt;% \n        round(3) %&gt;% \n        as.character() %&gt;% \n        as_factor() %&gt;% \n        fct_reorder(as.numeric(model_id)),\n      logloss  = logloss %&gt;% \n        round(4) %&gt;% \n        as.character() %&gt;% \n        as_factor() %&gt;% \n        fct_reorder(as.numeric(model_id))\n    )\n  \n  \n  # 1A. ROC Plot\n  \n  p1 &lt;- model_metrics_tbl %&gt;%\n    ggplot(aes(fpr, tpr, color = model_id, linetype = !! order_by_expr)) +\n    geom_line(size = size) +\n    theme_new +\n    labs(title = \"ROC\", x = \"FPR\", y = \"TPR\") +\n    theme(legend.direction = \"vertical\") \n  \n  \n  # 1B. Precision vs Recall\n  \n  p2 &lt;- model_metrics_tbl %&gt;%\n    ggplot(aes(recall, precision, color = model_id, linetype = !! order_by_expr)) +\n    geom_line(size = size) +\n    theme_new +\n    labs(title = \"Precision Vs Recall\", x = \"Recall\", y = \"Precision\") +\n    theme(legend.position = \"none\") \n  \n  \n  # 2. Gain / Lift\n  \n  get_gain_lift &lt;- function(model_id, test_tbl) {\n    \n    model_h2o &lt;- h2o.getModel(model_id)\n    perf_h2o  &lt;- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n    \n    perf_h2o %&gt;%\n      h2o.gainsLift() %&gt;%\n      as.tibble() %&gt;%\n      select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift)\n    \n  }\n  \n  gain_lift_tbl &lt;- leaderboard_tbl %&gt;%\n    mutate(metrics = map(model_id, get_gain_lift, newdata_tbl)) %&gt;%\n    unnest(cols = metrics) %&gt;%\n    mutate(\n      model_id = as_factor(model_id) %&gt;% \n        fct_reorder(!! order_by_expr, \n                    .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n      auc  = auc %&gt;% \n        round(3) %&gt;% \n        as.character() %&gt;% \n        as_factor() %&gt;% \n        fct_reorder(as.numeric(model_id)),\n      logloss = logloss %&gt;% \n        round(4) %&gt;% \n        as.character() %&gt;% \n        as_factor() %&gt;% \n        fct_reorder(as.numeric(model_id))\n    ) %&gt;%\n    rename(\n      gain = cumulative_capture_rate,\n      lift = cumulative_lift\n    ) \n  \n  # 2A. Gain Plot\n  \n  p3 &lt;- gain_lift_tbl %&gt;%\n    ggplot(aes(cumulative_data_fraction, gain, \n               color = model_id, linetype = !! order_by_expr)) +\n    geom_line(size = size,) +\n    geom_segment(x = 0, y = 0, xend = 1, yend = 1, \n                 color = \"red\", size = size, linetype = \"dotted\") +\n    theme_new +\n    expand_limits(x = c(0, 1), y = c(0, 1)) +\n    labs(title = \"Gain\",\n         x = \"Cumulative Data Fraction\", y = \"Gain\") +\n    theme(legend.position = \"none\")\n  \n  # 2B. Lift Plot\n  \n  p4 &lt;- gain_lift_tbl %&gt;%\n    ggplot(aes(cumulative_data_fraction, lift, \n               color = model_id, linetype = !! order_by_expr)) +\n    geom_line(size = size) +\n    geom_segment(x = 0, y = 1, xend = 1, yend = 1, \n                 color = \"red\", size = size, linetype = \"dotted\") +\n    theme_new +\n    expand_limits(x = c(0, 1), y = c(0, 1)) +\n    labs(title = \"Lift\",\n         x = \"Cumulative Data Fraction\", y = \"Lift\") +\n    theme(legend.position = \"none\") \n  \n  \n  # Combine using cowplot\n  \n  # cowplot::get_legend extracts a legend from a ggplot object\n  p_legend &lt;- get_legend(p1)\n  # Remove legend from p1\n  p1 &lt;- p1 + theme(legend.position = \"none\")\n  \n  # cowplot::plt_grid() combines multiple ggplots into a single cowplot object\n  p &lt;- cowplot::plot_grid(p1, p2, p3, p4, ncol = 2)\n  \n  # cowplot::ggdraw() sets up a drawing layer\n  p_title &lt;- ggdraw() + \n    \n    # cowplot::draw_label() draws text on a ggdraw layer / ggplot object\n    draw_label(\"H2O Model Metrics\", size = 18, fontface = \"bold\", \n               color = \"#2C3E50\")\n  \n  p_subtitle &lt;- ggdraw() + \n    draw_label(glue(\"Ordered by {toupper(order_by)}\"), size = 10,  \n               color = \"#2C3E50\")\n  \n  # Combine everything\n  ret &lt;- plot_grid(p_title, p_subtitle, p, p_legend, \n                   \n                   # Adjust the relative spacing, so that the legends always fits\n                   ncol = 1, rel_heights = c(0.05, 0.05, 1, 0.05 * max_models))\n  \n  h2o.show_progress()\n  \n  return(ret)\n}\n  \n\n# Load the data\nproduct_backorders_tbl &lt;- read_csv(\"../../scripts/data/product_backorders.csv\")\n\n#&gt; Rows: 19053 Columns: 23\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr  (7): potential_issue, deck_risk, oe_constraint, ppap_risk, stop_auto_bu...\n#&gt; dbl (16): sku, national_inv, lead_time, in_transit_qty, forecast_3_month, fo...\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Check for missing values and handle them\nproduct_backorders_tbl &lt;- product_backorders_tbl %&gt;%\n  mutate(across(everything(), ~ ifelse(is.na(.), -1, .)))\n\n# Convert categorical variables to factors\nproduct_backorders_tbl &lt;- product_backorders_tbl %&gt;%\n  mutate(across(where(is.character), as.factor))\n\n# Split the data into training, validation, and test sets\nset.seed(1113)  # Setting seed for reproducibility\nsplit_obj &lt;- rsample::initial_split(product_backorders_tbl, prop = c(0.7))\n\ntrain_tbl &lt;- training(split_obj)\n#valid_tbl &lt;- validation(split_obj)\ntest_tbl &lt;- testing(split_obj)\n\n# Initialize H2O\nh2o.init(max_mem_size = \"4G\")\n\n#&gt;  Connection successful!\n#&gt; \n#&gt; R is connected to the H2O cluster: \n#&gt;     H2O cluster uptime:         1 hours 24 minutes \n#&gt;     H2O cluster timezone:       Europe/Berlin \n#&gt;     H2O data parsing timezone:  UTC \n#&gt;     H2O cluster version:        3.44.0.3 \n#&gt;     H2O cluster version age:    6 months and 5 days \n#&gt;     H2O cluster name:           H2O_started_from_R_Davis_byi702 \n#&gt;     H2O cluster total nodes:    1 \n#&gt;     H2O cluster total memory:   3.82 GB \n#&gt;     H2O cluster total cores:    20 \n#&gt;     H2O cluster allowed cores:  20 \n#&gt;     H2O cluster healthy:        TRUE \n#&gt;     H2O Connection ip:          localhost \n#&gt;     H2O Connection port:        54321 \n#&gt;     H2O Connection proxy:       NA \n#&gt;     H2O Internal Security:      FALSE \n#&gt;     R Version:                  R version 4.3.3 (2024-02-29 ucrt)\n\n\n#&gt; Warning in h2o.clusterInfo(): \n#&gt; Your H2O cluster version is (6 months and 5 days) old. There may be a newer version available.\n#&gt; Please download and install the latest version from: https://h2o-release.s3.amazonaws.com/h2o/latest_stable.html\n\n# Convert data frames to H2O objects\ntrain_h2o &lt;- as.h2o(train_tbl)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n#valid_h2o &lt;- as.h2o(valid_tbl)\ntest_h2o &lt;- as.h2o(test_tbl)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# Specify the response and predictor variables\ny &lt;- \"went_on_backorder\"\nx &lt;- setdiff(names(train_tbl), y)\n\n\n# Run AutoML\nautoml_models_h2o &lt;- h2o.automl(\n  x = x,\n  y = y,\n  training_frame = train_h2o,\n  leaderboard_frame = test_h2o,  # Using test data for leaderboard\n  max_runtime_secs = 300,  # 5 minutes\n  nfolds = 5\n)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |==                                                                    |   2%\n#&gt; 17:21:26.810: AutoML: XGBoost is not available; skipping it.\n  |                                                                            \n  |===                                                                   |   4%\n  |                                                                            \n  |=====                                                                 |   7%\n  |                                                                            \n  |=======                                                               |  10%\n  |                                                                            \n  |=========                                                             |  12%\n  |                                                                            \n  |=============                                                         |  18%\n  |                                                                            \n  |==============                                                        |  20%\n  |                                                                            \n  |==================                                                    |  26%\n  |                                                                            \n  |====================                                                  |  28%\n  |                                                                            \n  |====================                                                  |  29%\n  |                                                                            \n  |=====================                                                 |  29%\n  |                                                                            \n  |=====================                                                 |  30%\n  |                                                                            \n  |=====================                                                 |  31%\n  |                                                                            \n  |======================                                                |  31%\n  |                                                                            \n  |======================                                                |  32%\n  |                                                                            \n  |=======================                                               |  32%\n  |                                                                            \n  |=======================                                               |  33%\n  |                                                                            \n  |========================                                              |  34%\n  |                                                                            \n  |========================                                              |  35%\n  |                                                                            \n  |=========================                                             |  35%\n  |                                                                            \n  |=========================                                             |  36%\n  |                                                                            \n  |==========================                                            |  37%\n  |                                                                            \n  |=============================                                         |  42%\n  |                                                                            \n  |================================                                      |  45%\n  |                                                                            \n  |=================================                                     |  48%\n  |                                                                            \n  |====================================                                  |  51%\n  |                                                                            \n  |=====================================                                 |  53%\n  |                                                                            \n  |======================================                                |  54%\n  |                                                                            \n  |======================================                                |  55%\n  |                                                                            \n  |=======================================                               |  56%\n  |                                                                            \n  |========================================                              |  57%\n  |                                                                            \n  |=========================================                             |  58%\n  |                                                                            \n  |==========================================                            |  59%\n  |                                                                            \n  |==========================================                            |  60%\n  |                                                                            \n  |===============================================                       |  66%\n  |                                                                            \n  |=================================================                     |  70%\n  |                                                                            \n  |==================================================                    |  71%\n  |                                                                            \n  |==================================================                    |  72%\n  |                                                                            \n  |===================================================                   |  73%\n  |                                                                            \n  |======================================================                |  76%\n  |                                                                            \n  |======================================================                |  77%\n  |                                                                            \n  |========================================================              |  79%\n  |                                                                            \n  |========================================================              |  80%\n  |                                                                            \n  |===========================================================           |  85%\n  |                                                                            \n  |=============================================================         |  87%\n  |                                                                            \n  |===============================================================       |  90%\n  |                                                                            \n  |=================================================================     |  93%\n  |                                                                            \n  |==================================================================    |  94%\n  |                                                                            \n  |===================================================================   |  96%\n  |                                                                            \n  |====================================================================  |  97%\n  |                                                                            \n  |===================================================================== |  98%\n  |                                                                            \n  |===================================================================== |  99%\n  |                                                                            \n  |======================================================================| 100%\n\n# View the leaderboard\nleaderboard &lt;- automl_models_h2o@leaderboard\nprint(leaderboard)\n\n#&gt;                                                  model_id       auc   logloss\n#&gt; 1    StackedEnsemble_AllModels_3_AutoML_3_20240625_172126 0.9569863 0.1626733\n#&gt; 2    StackedEnsemble_AllModels_4_AutoML_3_20240625_172126 0.9569804 0.1626734\n#&gt; 3    StackedEnsemble_AllModels_2_AutoML_3_20240625_172126 0.9543411 0.1672837\n#&gt; 4 StackedEnsemble_BestOfFamily_4_AutoML_3_20240625_172126 0.9539438 0.1662282\n#&gt; 5 StackedEnsemble_BestOfFamily_3_AutoML_3_20240625_172126 0.9533734 0.1691173\n#&gt; 6    StackedEnsemble_AllModels_1_AutoML_3_20240625_172126 0.9532016 0.1691218\n#&gt;       aucpr mean_per_class_error      rmse        mse\n#&gt; 1 0.7653149            0.1475498 0.2212984 0.04897298\n#&gt; 2 0.7652856            0.1475498 0.2212982 0.04897291\n#&gt; 3 0.7488958            0.1607456 0.2251489 0.05069204\n#&gt; 4 0.7524970            0.1604004 0.2228769 0.04967413\n#&gt; 5 0.7447929            0.1762260 0.2254881 0.05084490\n#&gt; 6 0.7444681            0.1647142 0.2264671 0.05128735\n#&gt; \n#&gt; [72 rows x 7 columns]\n\ndata_transformed_tbl &lt;- automl_models_h2o@leaderboard %&gt;%\n  as_tibble() %&gt;%\n  select(-c(aucpr, mean_per_class_error, rmse, mse)) %&gt;% \n  mutate(model_type = str_extract(model_id, \"[^_]+\")) %&gt;%\n  slice(1:15) %&gt;% \n  rownames_to_column(var = \"rowname\") %&gt;%\n  # Visually this step will not change anything\n  # It reorders the factors under the hood\n  mutate(\n    model_id   = as_factor(model_id) %&gt;% reorder(auc),\n    model_type = as.factor(model_type)\n  ) %&gt;% \n  pivot_longer(cols = -c(model_id, model_type, rowname), \n               names_to = \"key\", \n               values_to = \"value\", \n               names_transform = list(key = forcats::fct_inorder)\n  ) %&gt;% \n  mutate(model_id = paste0(rowname, \". \", model_id) %&gt;% as_factor() %&gt;% fct_rev())\n\ndata_transformed_tbl %&gt;%\n  ggplot(aes(value, model_id, color = model_type)) +\n  geom_point(size = 3) +\n  geom_label(aes(label = round(value, 2), hjust = \"inward\")) +\n  \n  # Facet to break out logloss and auc\n  facet_wrap(~ key, scales = \"free_x\") +\n  labs(title = \"Leaderboard Metrics\",\n       subtitle = paste0(\"Ordered by: \", \"auc\"),\n       y = \"Model Postion, Model ID\", x = \"\") + \n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n# Visualize the leaderboard\nplot_h2o_performance(automl_models_h2o@leaderboard, newdata = test_tbl, order_by = \"logloss\", max_models = 5)\n\n#&gt; Warning: There was 1 warning in `mutate()`.\n#&gt; ℹ In argument: `metrics = map(model_id, get_model_performance_metrics,\n#&gt;   newdata_tbl)`.\n#&gt; Caused by warning:\n#&gt; ! `as.tibble()` was deprecated in tibble 2.0.0.\n#&gt; ℹ Please use `as_tibble()` instead.\n#&gt; ℹ The signature and semantics have changed, see `?as_tibble`.\n\n\n#&gt; Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#&gt; ℹ Please use `linewidth` instead.\n\n\n#&gt; Warning in get_plot_component(plot, \"guide-box\"): Multiple components found;\n#&gt; returning the first one. To return all, use `return_all = TRUE`.\n\n\n\n\n\n\n\n# Assuming you want to tune a deep learning model with grid search\n# Define parameters for grid search\nhyper_params &lt;- list(\n  hidden = list(c(10, 10), c(20, 20), c(30, 30)),\n  epochs = c(10, 20, 30)\n)\n\n\n# Perform grid search\ndeeplearning_grid &lt;- h2o.grid(\n  algorithm = \"deeplearning\",\n  grid_id = \"deeplearning_grid_2\",\n  x = x,\n  y = y,\n  training_frame = train_h2o,\n  #validation_frame = valid_h2o,\n  nfolds = 5,\n  hyper_params = list(\n    # Use some combinations (the first one was the original)\n    hidden = list(c(10, 10, 10), c(50, 20, 10), c(20, 20, 20)),\n    epochs = c(10, 50, 100)\n  )\n)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# Get the best model from grid search\nbest_model &lt;- h2o.getModel(deeplearning_grid@model_ids[[1]]) %&gt;%\n  h2o.saveModel(path = \"../../scripts/data/h2o_models/\")"
  },
  {
    "objectID": "content/01_journal/04_automated_ML_with_H2O_1.html",
    "href": "content/01_journal/04_automated_ML_with_H2O_1.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/02_supervised_ML_1.html",
    "href": "content/01_journal/02_supervised_ML_1.html",
    "title": "Challenge 1 Machine Learning Fundamentals",
    "section": "",
    "text": "# Load the libraries\nlibrary(tidyverse)\nlibrary(recipes)\nlibrary(workflows)\nlibrary(parsnip)\nlibrary(yardstick)\nlibrary(rsample)\n\n# Read the data\nbike_features_tbl &lt;- readRDS(\"../../scripts/data/bike_features_tbl.rds\")\nbike_features_tbl &lt;- bike_features_tbl %&gt;%\n  select(model:url, `Rear Derailleur`, `Shift Lever`) %&gt;%\nmutate(\n  `shimano dura-ace`        = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano dura-ace \") %&gt;% as.numeric(),\n  `shimano ultegra`         = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano ultegra \") %&gt;% as.numeric(),\n  `shimano 105`             = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano 105 \") %&gt;% as.numeric(),\n  `shimano tiagra`          = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano tiagra \") %&gt;% as.numeric(),\n  `Shimano sora`            = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano sora\") %&gt;% as.numeric(),\n  `shimano deore`           = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano deore(?! xt)\") %&gt;% as.numeric(),\n  `shimano slx`             = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano slx\") %&gt;% as.numeric(),\n  `shimano grx`             = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano grx\") %&gt;% as.numeric(),\n  `Shimano xt`              = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano deore xt |shimano xt \") %&gt;% as.numeric(),\n  `Shimano xtr`             = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano xtr\") %&gt;% as.numeric(),\n  `Shimano saint`           = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano saint\") %&gt;% as.numeric(),\n  `SRAM red`                = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram red\") %&gt;% as.numeric(),\n  `SRAM force`              = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram force\") %&gt;% as.numeric(),\n  `SRAM rival`              = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram rival\") %&gt;% as.numeric(),\n  `SRAM apex`               = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram apex\") %&gt;% as.numeric(),\n  `SRAM xx1`                = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram xx1\") %&gt;% as.numeric(),\n  `SRAM x01`                = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram x01|sram xo1\") %&gt;% as.numeric(),\n  `SRAM gx`                 = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram gx\") %&gt;% as.numeric(),\n  `SRAM nx`                 = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram nx\") %&gt;% as.numeric(),\n  `SRAM sx`                 = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram sx\") %&gt;% as.numeric(),\n  `SRAM sx`                 = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram sx\") %&gt;% as.numeric(),\n  `Campagnolo potenza`      = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"campagnolo potenza\") %&gt;% as.numeric(),\n  `Campagnolo super record` = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"campagnolo super record\") %&gt;% as.numeric(),\n  `shimano nexus`           = `Shift Lever`     %&gt;% str_to_lower() %&gt;% str_detect(\"shimano nexus\") %&gt;% as.numeric(),\n  `shimano alfine`          = `Shift Lever`     %&gt;% str_to_lower() %&gt;% str_detect(\"shimano alfine\") %&gt;% as.numeric()\n) %&gt;%\n  # Remove original columns\n  select(-c(`Rear Derailleur`, `Shift Lever`, `url`)) %&gt;%\n  # Set all NAs to 0\n  mutate_if(is.numeric, ~replace(., is.na(.), 0))\n\n# Split the data into training and testing sets\nset.seed(1123)  # For reproducibility\ndata_split &lt;- initial_split(bike_features_tbl, prop = 0.9)\ntrain_tbl &lt;- training(data_split)\ntest_tbl &lt;- testing(data_split) \n\n\n# Define the model\nlinear_model &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\")\n\nrecipe_obj &lt;- recipe(price ~ ., data = train_tbl) %&gt;% \n  step_rm(category_1, category_3, gender, weight) %&gt;%\n  step_dummy(all_nominal(), -all_outcomes()) \n\n\n# Create the workflow with recipe steps directly\nworkflow_obj &lt;- workflow() %&gt;%\n  add_recipe(recipe_obj) %&gt;%\n  add_model(linear_model)\n\n\n# Fit the workflow\nfit_workflow &lt;- workflow_obj %&gt;%\n  fit(data = train_tbl)\n\n\n# Make predictions using the fitted workflow\npredictions &lt;- predict(fit_workflow, new_data = test_tbl)\n\n#&gt; Warning: ! There are new levels in a factor: `Endurace WMN AL Disc 7.0`, `Endurace CF SL\n#&gt;   Disc 8.0 Di2`, `Endurace CF 8.0`, `Inflite CF SL 8`, `Speedmax CF SLX 9.0\n#&gt;   LTD`, `Speedmax WMN CF 7.0`, `Ultimate WMN CF SL Disc 7.0`, `Exceed CF SLX\n#&gt;   9.0 Race`, `Exceed CF SLX 9.0`, `Lux CF SLX 9.0`, `Lux CF SL 6.0`, `Neuron CF\n#&gt;   9 WMN`, `Spectral 6 WMN`, `Spectral:ON CF 7.0`, `Spectral:ON WMN CF 7.0`,\n#&gt;   `Strive CF 7.0`, `Pathlite:ON 6.0`, `Commuter 5.0`, …, `Commuter 3.0`, and\n#&gt;   `Pathlite 5 WMN`.\n\n\n#&gt; Warning in predict.lm(object = object$fit, newdata = new_data, type =\n#&gt; \"response\", : prediction from rank-deficient fit; consider predict(.,\n#&gt; rankdeficient=\"NA\")\n\n# Calculate metrics\nmetrics &lt;- predictions %&gt;% \n  bind_cols(test_tbl %&gt;% select(price)) %&gt;%\n  yardstick::metrics(truth = price, estimate = .pred)\n\n\n# Print the metrics\nprint(metrics)\n\n#&gt; # A tibble: 3 × 3\n#&gt;   .metric .estimator .estimate\n#&gt;   &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n#&gt; 1 rmse    standard       107. \n#&gt; 2 rsq     standard         1  \n#&gt; 3 mae     standard        95.0"
  },
  {
    "objectID": "content/01_journal/03_supervised_ML_2.html",
    "href": "content/01_journal/03_supervised_ML_2.html",
    "title": "Challenge 1 Machine Learning Fundamentals",
    "section": "",
    "text": "# Challenge\nlibrary(tidyverse)\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.4     ✔ readr     2.1.5\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.1\n#&gt; ✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n#&gt; ✔ purrr     1.0.2     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidyquant)\n\n#&gt; Lade nötiges Paket: PerformanceAnalytics\n#&gt; Lade nötiges Paket: xts\n#&gt; Lade nötiges Paket: zoo\n#&gt; \n#&gt; Attache Paket: 'zoo'\n#&gt; \n#&gt; Die folgenden Objekte sind maskiert von 'package:base':\n#&gt; \n#&gt;     as.Date, as.Date.numeric\n#&gt; \n#&gt; \n#&gt; ######################### Warning from 'xts' package ##########################\n#&gt; #                                                                             #\n#&gt; # The dplyr lag() function breaks how base R's lag() function is supposed to  #\n#&gt; # work, which breaks lag(my_xts). Calls to lag(my_xts) that you type or       #\n#&gt; # source() into this session won't work correctly.                            #\n#&gt; #                                                                             #\n#&gt; # Use stats::lag() to make sure you're not using dplyr::lag(), or you can add #\n#&gt; # conflictRules('dplyr', exclude = 'lag') to your .Rprofile to stop           #\n#&gt; # dplyr from breaking base R's lag() function.                                #\n#&gt; #                                                                             #\n#&gt; # Code in packages is not affected. It's protected by R's namespace mechanism #\n#&gt; # Set `options(xts.warn_dplyr_breaks_lag = FALSE)` to suppress this warning.  #\n#&gt; #                                                                             #\n#&gt; ###############################################################################\n#&gt; \n#&gt; Attache Paket: 'xts'\n#&gt; \n#&gt; Die folgenden Objekte sind maskiert von 'package:dplyr':\n#&gt; \n#&gt;     first, last\n#&gt; \n#&gt; \n#&gt; Attache Paket: 'PerformanceAnalytics'\n#&gt; \n#&gt; Das folgende Objekt ist maskiert 'package:graphics':\n#&gt; \n#&gt;     legend\n#&gt; \n#&gt; Lade nötiges Paket: quantmod\n#&gt; Lade nötiges Paket: TTR\n#&gt; Registered S3 method overwritten by 'quantmod':\n#&gt;   method            from\n#&gt;   as.zoo.data.frame zoo\n\nlibrary(broom)\nlibrary(umap)\n\n# Step 1\nsp_500_daily_returns_tbl &lt;- readRDS(\"../../scripts/data/sp_500_prices_tbl.rds\")\n\n# Perform the operations\nsp_500_daily_returns_tbl &lt;- sp_500_daily_returns_tbl %&gt;%\n  # Select the necessary columns\n  select(symbol, date, adjusted) %&gt;%\n  # Filter the data to include only dates from 2018 and beyond\n  filter(as.Date(date) &gt;= as.Date(\"2018-01-01\")) %&gt;%\n  # Group by symbol\n  group_by(symbol) %&gt;%\n  # Compute the lag of 1 day on the adjusted stock price\n  mutate(lag_adjusted = lag(adjusted, 1)) %&gt;%\n  # Remove NA values from the lagging operation\n  filter(!is.na(lag_adjusted)) %&gt;%\n  # Compute the difference between adjusted and the lag\n  mutate(diff = adjusted - lag_adjusted) %&gt;%\n  # Compute the percentage difference\n  mutate(pct_return = (diff / lag_adjusted)) %&gt;%\n  # Select only the symbol, date, and pct_return columns\n  select(symbol, date, pct_return) %&gt;%\n  # Sort by symbol\n  arrange(symbol)\n\n\n# Display the resulting data frame\nsp_500_daily_returns_tbl\n\n\n\n  \n\n\n# Step 2\n# Convert the data frame to the desired format\nstock_date_matrix_tbl &lt;- sp_500_daily_returns_tbl %&gt;%\n  # Spread the date column to wide format with pct_return as values\n  pivot_wider(names_from = date, values_from = pct_return, values_fill = list(pct_return = 0)) %&gt;%\n  ungroup\n\n# Display the resulting data frame\nstock_date_matrix_tbl\n\n\n\n  \n\n\n# Step 3\n# Impute missing values with column means and convert to user-item format\nstock_date_matrix_numeric_imputed &lt;- stock_date_matrix_tbl %&gt;%\n  select(-symbol) \n  #%&gt;% pivot_wider(names_from = date, values_from = pct_return, values_fill = mean, values_fn = list(pct_return = mean))\n\n# Perform K-Means clustering with centers = 4 and nstart = 20\nset.seed(123) # Setting a seed for reproducibility\nkmeans_obj &lt;- kmeans(stock_date_matrix_numeric_imputed, centers = 4, nstart = 20)\n\n# Use glance() to get the tot.withinss\nkmeans_summary &lt;- glance(kmeans_obj)\n\n# Print the tot.withinss\nprint(\"Total within-cluster sum of squares (tot.withinss):\")\n\n#&gt; [1] \"Total within-cluster sum of squares (tot.withinss):\"\n\nprint(kmeans_summary$tot.withinss)\n\n#&gt; [1] 29.20555\n\n# Step 4\nkmeans_mapper &lt;- function(center = 3) {\n  stock_date_matrix_tbl %&gt;%\n    select(-symbol) %&gt;%\n    kmeans(centers = center, nstart = 20)\n}\n\n\n# Create a tibble with column centers from 1 to 30\ncenters_tbl &lt;- tibble(centers = 1:30)\n\n# Add a column named k_means with the kmeans_mapper() output\nk_means_mapped_tbl &lt;- centers_tbl %&gt;%\n  mutate(k_means = map(centers, ~kmeans_mapper(.x)))\n\n# Add a column named glance with the glance() output\nk_means_mapped_tbl &lt;- k_means_mapped_tbl %&gt;%\n  mutate(glance = map(k_means, glance))\n\n# Unnest the glance column\nk_means_mapped_tbl &lt;- k_means_mapped_tbl %&gt;%\n  unnest(glance)\n\n# Visualize Scree Plot\nggplot(k_means_mapped_tbl, aes(x = centers, y = tot.withinss)) +\n  geom_point() +\n  geom_line() +\n  labs(title = \"Scree Plot\") +\n  theme_minimal()\n\n\n\n\n\n\n# Step 5\n# Apply UMAP to stock_date_matrix_tbl\numap_results &lt;- stock_date_matrix_tbl %&gt;%\n  select(-symbol) %&gt;%\n  umap()\n\n# Store UMAP results\numap_results_tbl &lt;- umap_results$layout %&gt;%\n  as_tibble() %&gt;%\n  bind_cols(symbol = stock_date_matrix_tbl$symbol)\n\n#&gt; Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n#&gt; `.name_repair` is omitted as of tibble 2.0.0.\n#&gt; ℹ Using compatibility `.name_repair`.\n\n# Visualize UMAP results\numap_results_tbl %&gt;%\n  ggplot(aes(x = V1, y = V2)) +\n  geom_point(alpha = 0.5) +\n  theme_tq() +\n  labs(title = \"UMAP Projection\")\n\n\n\n\n\n\n# Step 6\nsp_500_index_tbl &lt;- read_rds(\"../../scripts/data/sp_500_index_tbl.rds\")\nk_means_mapped_tbl &lt;- read_rds(\"../../scripts/data/k_means_mapped_tbl.rds\")\numap_results_tbl   &lt;- read_rds(\"../../scripts/data/umap_results_tbl.rds\")\nstock_date_matrix_tbl &lt;- read_rds(\"../../scripts/data/stock_date_matrix_tbl.rds\")\n\n# Get the k_means_obj from the 10th center\nk_means_obj &lt;- k_means_mapped_tbl %&gt;%\n  filter(centers == 10) %&gt;%\n  pull(k_means) %&gt;%\n  pluck(1)\n\n# Extract the cluster assignments from k_means_obj\nk_means_clusters &lt;- k_means_obj$cluster\n\n# Augment the k_means_obj with the stock_date_matrix_tbl\n# Add the clusters to the data\numap_kmeans_results_tbl &lt;- broom::augment(k_means_obj, stock_date_matrix_tbl) %&gt;%\n  select(symbol , .cluster) %&gt;%\n  left_join(umap_results_tbl, by = \"symbol\") %&gt;%\n  left_join(sp_500_index_tbl %&gt;% select(symbol, company, sector), by = \"symbol\")\n\n\n# Plot the K-Means and UMAP results\nggplot(umap_kmeans_results_tbl, aes(V1, V2, color = .cluster)) +\n  geom_point(alpha = 0.5) \n\n\n\n\n\n\n#+ scale_color_manual(values = palette_light() %&gt;% rep(3))"
  },
  {
    "objectID": "content/01_journal/04_automated_ML_with_H2o_1.html",
    "href": "content/01_journal/04_automated_ML_with_H2o_1.html",
    "title": "Automated Machine Learning with H20 (I)",
    "section": "",
    "text": "1 Compensation Features\nWhat can you deduce about the interaction between Monthly Income and Attrition?\nA) Those that are leaving the company have a higher Monthly Income\nB) That those are staying have a lower Monthly Income\nC) Those that are leaving have a lower Monthly Income\nD) It's difficult to deduce anything based on the visualization\nAnswer: C\n\n\n2 Compensation Features\nWhat can you deduce about the interaction between Percent Salary Hike and Attrition?\nA) Those that are leaving the company have a higher Percent Salary Hike\nB) Those that are staying have a lower Percent Salary Hike\nC) Those that are leaving have lower Percent Salary Hike\nD) It's difficult to deduce anything based on the visualization\nAnswer: D, difficult as the plot indicates similar medians and ranges for both groups as well as a significant overlap in the distributions of Percent Salary Hike for both groups.\n\n\n3 Compensation Features\nWhat can you deduce about the interaction between Stock Option Level and Attrition?\nA) Those that are leaving the company have a higher stock option level\nB) Those that are staying have a higher stock option level\nC) It's difficult to deduce anything based on the visualization\nAnswer: B\n\n\n4 Survey Results\nWhat can you deduce about the interaction between Environment Satisfaction and Attrition?\nA) A higher proportion of those leaving have a low environment satisfaction level\nB) A higher proportion of those leaving have a high environment satisfaction level\nC) It's difficult to deduce anything based on the visualization\nAnswer: A\n\n\n5 Survey Results\nWhat can you deduce about the interaction between Work Life Balance and Attrition\nA) Those that are leaving have higher density of 2's and 3's\nB) Those that are staying have a higher density of 2's and 3's\nC) Those that are staying have a lower density of 2's and 3's\nD) It's difficult to deduce anything based on the visualization\nAnswer: B\n\n\n6 Performance Data\nWhat Can you deduce about the interaction between Job Involvement and Attrition?\nA) Those that are leaving have a lower density of 3's and 4's\nB) Those that are leaving have a lower density of 1's and 2's\nC) Those that are staying have a lower density of 2's and 3's\nD) It's difficult to deduce anything based on the visualization\nAnswer: A\n\n\n7 Work-Life Features\nWhat can you deduce about the interaction between Over Time and Attrition?\nA) The proportion of those leaving that are working Over Time are high compared to those that are not leaving\nB) The proportion of those staying that are working Over Time are high compared to those that are not staying\nAnswer: A\n\n\n8 Training and Education\nWhat can you deduce about the interaction between Training Times Last Year and Attrition\nA) People that leave tend to have more annual trainings\nB) People that leave tend to have less annual trainings\nC) It's difficult to deduce anything based on the visualization\nAnswer: B\n\n\n9 Time-Based Features\nWhat can you deduce about the interaction between Years At Company and Attrition\nA) People that leave tend to have more working years at the company\nB) People that leave tend to have less working years at the company\nC) It's difficult to deduce anything based on the visualization\nAnswer: B\n\n\n10 Time-Based Features\nWhat can you deduce about the interaction between Years Since Last Promotion and Attrition?\nA) Those that are leaving have more years since last promotion than those that are staying\nB) Those that are leaving have fewer years since last promotion than those that are staying\nC) It's difficult to deduce anything based on the visualization\nAnswer: B"
  },
  {
    "objectID": "content/01_journal/02_supervised_ML.html",
    "href": "content/01_journal/02_supervised_ML.html",
    "title": "Supervised ML - Regression (I) & (II)",
    "section": "",
    "text": "# Load libraries\nlibrary(tidyverse)\nlibrary(recipes)\nlibrary(workflows)\nlibrary(parsnip)\nlibrary(yardstick)\nlibrary(rsample)\n\n# Read data\nbike_features_tbl &lt;- readRDS(\"../../scripts/data/bike_features_tbl.rds\")\nbike_features_tbl &lt;- bike_features_tbl %&gt;%\n  select(model:url, `Rear Derailleur`, `Shift Lever`) %&gt;%\nmutate(\n  `shimano dura-ace`        = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano dura-ace \") %&gt;% as.numeric(),\n  `shimano ultegra`         = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano ultegra \") %&gt;% as.numeric(),\n  `shimano 105`             = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano 105 \") %&gt;% as.numeric(),\n  `shimano tiagra`          = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano tiagra \") %&gt;% as.numeric(),\n  `Shimano sora`            = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano sora\") %&gt;% as.numeric(),\n  `shimano deore`           = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano deore(?! xt)\") %&gt;% as.numeric(),\n  `shimano slx`             = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano slx\") %&gt;% as.numeric(),\n  `shimano grx`             = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano grx\") %&gt;% as.numeric(),\n  `Shimano xt`              = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano deore xt |shimano xt \") %&gt;% as.numeric(),\n  `Shimano xtr`             = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano xtr\") %&gt;% as.numeric(),\n  `Shimano saint`           = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"shimano saint\") %&gt;% as.numeric(),\n  `SRAM red`                = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram red\") %&gt;% as.numeric(),\n  `SRAM force`              = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram force\") %&gt;% as.numeric(),\n  `SRAM rival`              = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram rival\") %&gt;% as.numeric(),\n  `SRAM apex`               = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram apex\") %&gt;% as.numeric(),\n  `SRAM xx1`                = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram xx1\") %&gt;% as.numeric(),\n  `SRAM x01`                = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram x01|sram xo1\") %&gt;% as.numeric(),\n  `SRAM gx`                 = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram gx\") %&gt;% as.numeric(),\n  `SRAM nx`                 = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram nx\") %&gt;% as.numeric(),\n  `SRAM sx`                 = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram sx\") %&gt;% as.numeric(),\n  `SRAM sx`                 = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"sram sx\") %&gt;% as.numeric(),\n  `Campagnolo potenza`      = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"campagnolo potenza\") %&gt;% as.numeric(),\n  `Campagnolo super record` = `Rear Derailleur` %&gt;% str_to_lower() %&gt;% str_detect(\"campagnolo super record\") %&gt;% as.numeric(),\n  `shimano nexus`           = `Shift Lever`     %&gt;% str_to_lower() %&gt;% str_detect(\"shimano nexus\") %&gt;% as.numeric(),\n  `shimano alfine`          = `Shift Lever`     %&gt;% str_to_lower() %&gt;% str_detect(\"shimano alfine\") %&gt;% as.numeric()\n) %&gt;%\n  # Remove original columns\n  select(-c(`Rear Derailleur`, `Shift Lever`, `url`)) %&gt;%\n  # Set all NAs to 0\n  mutate_if(is.numeric, ~replace(., is.na(.), 0))\n\n# Split data into training and testing sets\nset.seed(1123)  # For reproducibility\ndata_split &lt;- initial_split(bike_features_tbl, prop = 0.9)\ntrain_tbl &lt;- training(data_split)\ntest_tbl &lt;- testing(data_split) \n\n\n# Define model\nlinear_model &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\")\n\nrecipe_obj &lt;- recipe(price ~ ., data = train_tbl) %&gt;% \n  step_rm(category_1, category_3, gender, weight) %&gt;%\n  step_dummy(all_nominal(), -all_outcomes()) \n\n\n# Create workflow with recipe\nworkflow_obj &lt;- workflow() %&gt;%\n  add_recipe(recipe_obj) %&gt;%\n  add_model(linear_model)\n\n\n# Fit workflow\nfit_workflow &lt;- workflow_obj %&gt;%\n  fit(data = train_tbl)\n\n\n# Make predictions using fitted workflow\npredictions &lt;- predict(fit_workflow, new_data = test_tbl)\n\n#&gt; Warning: ! There are new levels in a factor: `Endurace WMN AL Disc 7.0`, `Endurace CF SL\n#&gt;   Disc 8.0 Di2`, `Endurace CF 8.0`, `Inflite CF SL 8`, `Speedmax CF SLX 9.0\n#&gt;   LTD`, `Speedmax WMN CF 7.0`, `Ultimate WMN CF SL Disc 7.0`, `Exceed CF SLX\n#&gt;   9.0 Race`, `Exceed CF SLX 9.0`, `Lux CF SLX 9.0`, `Lux CF SL 6.0`, `Neuron CF\n#&gt;   9 WMN`, `Spectral 6 WMN`, `Spectral:ON CF 7.0`, `Spectral:ON WMN CF 7.0`,\n#&gt;   `Strive CF 7.0`, `Pathlite:ON 6.0`, `Commuter 5.0`, …, `Commuter 3.0`, and\n#&gt;   `Pathlite 5 WMN`.\n\n\n#&gt; Warning in predict.lm(object = object$fit, newdata = new_data, type =\n#&gt; \"response\", : prediction from rank-deficient fit; consider predict(.,\n#&gt; rankdeficient=\"NA\")\n\n# Calculate metrics\nmetrics &lt;- predictions %&gt;% \n  bind_cols(test_tbl %&gt;% select(price)) %&gt;%\n  yardstick::metrics(truth = price, estimate = .pred)\n\n\n# Print metrics\nprint(metrics)\n\n#&gt; # A tibble: 3 × 3\n#&gt;   .metric .estimator .estimate\n#&gt;   &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n#&gt; 1 rmse    standard       107. \n#&gt; 2 rsq     standard         1  \n#&gt; 3 mae     standard        95.0"
  },
  {
    "objectID": "content/01_journal/05_automated_ML_with_H2o_2.html",
    "href": "content/01_journal/05_automated_ML_with_H2o_2.html",
    "title": "Automated Machine Learning with H20 (II)",
    "section": "",
    "text": "# Load necessary libraries\nlibrary(tidyverse)\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.4     ✔ readr     2.1.5\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.1\n#&gt; ✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n#&gt; ✔ purrr     1.0.2     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(readr)\nlibrary(rsample)\nlibrary(h2o)\n\n#&gt; \n#&gt; ----------------------------------------------------------------------\n#&gt; \n#&gt; Your next step is to start H2O:\n#&gt;     &gt; h2o.init()\n#&gt; \n#&gt; For H2O package documentation, ask for help:\n#&gt;     &gt; ??h2o\n#&gt; \n#&gt; After starting H2O, you can use the Web UI at http://localhost:54321\n#&gt; For more information visit https://docs.h2o.ai\n#&gt; \n#&gt; ----------------------------------------------------------------------\n#&gt; \n#&gt; \n#&gt; Attache Paket: 'h2o'\n#&gt; \n#&gt; Die folgenden Objekte sind maskiert von 'package:lubridate':\n#&gt; \n#&gt;     day, hour, month, week, year\n#&gt; \n#&gt; Die folgenden Objekte sind maskiert von 'package:stats':\n#&gt; \n#&gt;     cor, sd, var\n#&gt; \n#&gt; Die folgenden Objekte sind maskiert von 'package:base':\n#&gt; \n#&gt;     %*%, %in%, &&, ||, apply, as.factor, as.numeric, colnames,\n#&gt;     colnames&lt;-, ifelse, is.character, is.factor, is.numeric, log,\n#&gt;     log10, log1p, log2, round, signif, trunc\n\n# Load the data\nproduct_backorders_tbl &lt;- read_csv(\"../../scripts/data/product_backorders.csv\")\n\n#&gt; Rows: 19053 Columns: 23\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr  (7): potential_issue, deck_risk, oe_constraint, ppap_risk, stop_auto_bu...\n#&gt; dbl (16): sku, national_inv, lead_time, in_transit_qty, forecast_3_month, fo...\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Check for missing values and handle them\nproduct_backorders_tbl &lt;- product_backorders_tbl %&gt;%\n  mutate(across(everything(), ~ ifelse(is.na(.), -1, .)))\n\n# Check and adjust data types\nstr(product_backorders_tbl)\n\n#&gt; tibble [19,053 × 23] (S3: tbl_df/tbl/data.frame)\n#&gt;  $ sku              : num [1:19053] 1113121 1113268 1113874 1114222 1114823 ...\n#&gt;  $ national_inv     : num [1:19053] 0 0 20 0 0 55 -34 4 2 -7 ...\n#&gt;  $ lead_time        : num [1:19053] 8 8 2 8 12 8 8 9 8 8 ...\n#&gt;  $ in_transit_qty   : num [1:19053] 1 0 0 0 0 0 0 0 0 0 ...\n#&gt;  $ forecast_3_month : num [1:19053] 6 2 45 9 31 216 120 43 4 56 ...\n#&gt;  $ forecast_6_month : num [1:19053] 6 3 99 14 31 360 240 67 6 96 ...\n#&gt;  $ forecast_9_month : num [1:19053] 6 4 153 21 31 492 240 115 9 112 ...\n#&gt;  $ sales_1_month    : num [1:19053] 0 1 16 5 7 30 83 5 1 13 ...\n#&gt;  $ sales_3_month    : num [1:19053] 4 2 42 17 15 108 122 22 5 30 ...\n#&gt;  $ sales_6_month    : num [1:19053] 9 3 80 36 33 275 144 40 6 56 ...\n#&gt;  $ sales_9_month    : num [1:19053] 12 3 111 43 47 340 165 58 9 76 ...\n#&gt;  $ min_bank         : num [1:19053] 0 0 10 0 2 51 33 4 2 0 ...\n#&gt;  $ potential_issue  : chr [1:19053] \"No\" \"No\" \"No\" \"No\" ...\n#&gt;  $ pieces_past_due  : num [1:19053] 1 0 0 0 3 0 0 0 0 0 ...\n#&gt;  $ perf_6_month_avg : num [1:19053] 0.9 0.96 0.81 0.96 0.98 0 1 0.69 1 0.97 ...\n#&gt;  $ perf_12_month_avg: num [1:19053] 0.89 0.97 0.88 0.98 0.98 0 0.97 0.68 0.95 0.92 ...\n#&gt;  $ local_bo_qty     : num [1:19053] 0 0 0 0 0 0 34 0 0 7 ...\n#&gt;  $ deck_risk        : chr [1:19053] \"No\" \"No\" \"No\" \"No\" ...\n#&gt;  $ oe_constraint    : chr [1:19053] \"No\" \"No\" \"No\" \"No\" ...\n#&gt;  $ ppap_risk        : chr [1:19053] \"No\" \"No\" \"No\" \"No\" ...\n#&gt;  $ stop_auto_buy    : chr [1:19053] \"Yes\" \"Yes\" \"Yes\" \"Yes\" ...\n#&gt;  $ rev_stop         : chr [1:19053] \"No\" \"No\" \"No\" \"No\" ...\n#&gt;  $ went_on_backorder: chr [1:19053] \"Yes\" \"Yes\" \"Yes\" \"Yes\" ...\n\n# Convert categorical variables to factors\nproduct_backorders_tbl &lt;- product_backorders_tbl %&gt;%\n  mutate(across(where(is.character), as.factor))\n\n# Split the data into training, validation, and test sets\nset.seed(1113)  # Setting seed for reproducibility\nsplit_obj &lt;- rsample::initial_split(product_backorders_tbl, prop = c(0.7))\n\ntrain_tbl &lt;- training(split_obj)\n#valid_tbl &lt;- validation(split_obj)\ntest_tbl &lt;- testing(split_obj)\n\n# Initialize H2O\nh2o.init()\n\n#&gt; \n#&gt; H2O is not running yet, starting it now...\n#&gt; \n#&gt; Note:  In case of errors look at the following log files:\n#&gt;     C:\\Users\\Davis-PC\\AppData\\Local\\Temp\\Rtmp4S0Chb\\file2de0637573a/h2o_Davis_started_from_r.out\n#&gt;     C:\\Users\\Davis-PC\\AppData\\Local\\Temp\\Rtmp4S0Chb\\file2de07e0077db/h2o_Davis_started_from_r.err\n#&gt; \n#&gt; \n#&gt; Starting H2O JVM and connecting:  Connection successful!\n#&gt; \n#&gt; R is connected to the H2O cluster: \n#&gt;     H2O cluster uptime:         2 seconds 903 milliseconds \n#&gt;     H2O cluster timezone:       Europe/Berlin \n#&gt;     H2O data parsing timezone:  UTC \n#&gt;     H2O cluster version:        3.44.0.3 \n#&gt;     H2O cluster version age:    6 months and 4 days \n#&gt;     H2O cluster name:           H2O_started_from_R_Davis_byi702 \n#&gt;     H2O cluster total nodes:    1 \n#&gt;     H2O cluster total memory:   7.98 GB \n#&gt;     H2O cluster total cores:    20 \n#&gt;     H2O cluster allowed cores:  20 \n#&gt;     H2O cluster healthy:        TRUE \n#&gt;     H2O Connection ip:          localhost \n#&gt;     H2O Connection port:        54321 \n#&gt;     H2O Connection proxy:       NA \n#&gt;     H2O Internal Security:      FALSE \n#&gt;     R Version:                  R version 4.3.3 (2024-02-29 ucrt)\n\n\n#&gt; Warning in h2o.clusterInfo(): \n#&gt; Your H2O cluster version is (6 months and 4 days) old. There may be a newer version available.\n#&gt; Please download and install the latest version from: https://h2o-release.s3.amazonaws.com/h2o/latest_stable.html\n\n# Convert data frames to H2O objects\ntrain_h2o &lt;- as.h2o(train_tbl)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n#valid_h2o &lt;- as.h2o(valid_tbl)\ntest_h2o &lt;- as.h2o(test_tbl)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# Specify the response and predictor variables\ny &lt;- \"went_on_backorder\"\nx &lt;- setdiff(names(train_tbl), y)\n\n# Run AutoML\nautoml_models_h2o &lt;- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  #validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 300,  # 5 minutes\n  nfolds            = 5\n)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n#&gt; 15:35:33.606: AutoML: XGBoost is not available; skipping it.\n  |                                                                            \n  |==                                                                    |   2%\n  |                                                                            \n  |===                                                                   |   4%\n  |                                                                            \n  |====                                                                  |   6%\n  |                                                                            \n  |======                                                                |   8%\n  |                                                                            \n  |=========                                                             |  12%\n  |                                                                            \n  |=============                                                         |  18%\n  |                                                                            \n  |==============                                                        |  20%\n  |                                                                            \n  |================                                                      |  22%\n  |                                                                            \n  |====================                                                  |  28%\n  |                                                                            \n  |====================                                                  |  29%\n  |                                                                            \n  |=====================                                                 |  29%\n  |                                                                            \n  |=====================                                                 |  30%\n  |                                                                            \n  |=====================                                                 |  31%\n  |                                                                            \n  |======================                                                |  31%\n  |                                                                            \n  |======================                                                |  32%\n  |                                                                            \n  |=======================                                               |  32%\n  |                                                                            \n  |=======================                                               |  33%\n  |                                                                            \n  |========================                                              |  34%\n  |                                                                            \n  |=============================                                         |  42%\n  |                                                                            \n  |==============================                                        |  43%\n  |                                                                            \n  |================================                                      |  45%\n  |                                                                            \n  |==================================                                    |  49%\n  |                                                                            \n  |====================================                                  |  51%\n  |                                                                            \n  |======================================                                |  55%\n  |                                                                            \n  |=======================================                               |  56%\n  |                                                                            \n  |========================================                              |  57%\n  |                                                                            \n  |========================================                              |  58%\n  |                                                                            \n  |=========================================                             |  59%\n  |                                                                            \n  |==========================================                            |  60%\n  |                                                                            \n  |===========================================                           |  61%\n  |                                                                            \n  |=================================================                     |  70%\n  |                                                                            \n  |=================================================                     |  71%\n  |                                                                            \n  |====================================================                  |  74%\n  |                                                                            \n  |=====================================================                 |  75%\n  |                                                                            \n  |======================================================                |  77%\n  |                                                                            \n  |=======================================================               |  78%\n  |                                                                            \n  |==========================================================            |  83%\n  |                                                                            \n  |============================================================          |  86%\n  |                                                                            \n  |=============================================================         |  87%\n  |                                                                            \n  |================================================================      |  91%\n  |                                                                            \n  |=================================================================     |  93%\n  |                                                                            \n  |===================================================================   |  96%\n  |                                                                            \n  |======================================================================| 100%\n\n# View the leaderboard\nleaderboard &lt;- automl_models_h2o@leaderboard\nprint(leaderboard)\n\n#&gt;                                                  model_id       auc   logloss\n#&gt; 1    StackedEnsemble_AllModels_3_AutoML_1_20240625_153533 0.9551961 0.1662080\n#&gt; 2    StackedEnsemble_AllModels_4_AutoML_1_20240625_153533 0.9551955 0.1662081\n#&gt; 3    StackedEnsemble_AllModels_2_AutoML_1_20240625_153533 0.9542625 0.1673831\n#&gt; 4 StackedEnsemble_BestOfFamily_4_AutoML_1_20240625_153533 0.9538441 0.1677118\n#&gt; 5 StackedEnsemble_BestOfFamily_3_AutoML_1_20240625_153533 0.9532337 0.1693340\n#&gt; 6    StackedEnsemble_AllModels_1_AutoML_1_20240625_153533 0.9530344 0.1696087\n#&gt;       aucpr mean_per_class_error      rmse        mse\n#&gt; 1 0.7509944            0.1507242 0.2238393 0.05010401\n#&gt; 2 0.7509939            0.1507242 0.2238393 0.05010404\n#&gt; 3 0.7451901            0.1446704 0.2249867 0.05061901\n#&gt; 4 0.7430459            0.1692322 0.2243736 0.05034350\n#&gt; 5 0.7376921            0.1579688 0.2256441 0.05091524\n#&gt; 6 0.7412521            0.1443718 0.2264441 0.05127695\n#&gt; \n#&gt; [63 rows x 7 columns]\n\n# Predict using the leader model\nleader_model &lt;- automl_models_h2o@leader\npredictions &lt;- h2o.predict(leader_model, newdata = test_h2o)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# Save the leader model\nmodel_path &lt;- h2o.saveModel(object = leader_model, path = \"../../scripts/data/h2o_models\", force = TRUE)\nprint(model_path)\n\n#&gt; [1] \"C:\\\\Users\\\\Davis-PC\\\\OneDrive\\\\Dateien\\\\Master\\\\Aktuelle Module\\\\BusinessNTA\\\\Business Decisions with Machine Learning\\\\ss24-bdml-DavisR\\\\scripts\\\\data\\\\h2o_models\\\\StackedEnsemble_AllModels_3_AutoML_1_20240625_153533\"\n\n# Shutdown H2O\nh2o.shutdown(prompt = FALSE)"
  }
]