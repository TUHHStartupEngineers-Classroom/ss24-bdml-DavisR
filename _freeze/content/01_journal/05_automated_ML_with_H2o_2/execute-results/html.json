{
  "hash": "2e50f6dc797ad16120de5dff4997d392",
  "result": {
    "markdown": "---\ntitle: \"Automated Machine Learning with H20 (II)\"\nauthor: \"Davis Rakhshan\"\n---\n\n::: {.cell hash='05_automated_ML_with_H2o_2_cache/html/unnamed-chunk-1_6566ca536c3fd8f82699bed32cedb5c1'}\n\n```{.r .cell-code}\n# Load necessary libraries\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.4     ✔ readr     2.1.5\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.1\n#> ✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n#> ✔ purrr     1.0.2     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(readr)\nlibrary(rsample)\nlibrary(h2o)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> ----------------------------------------------------------------------\n#> \n#> Your next step is to start H2O:\n#>     > h2o.init()\n#> \n#> For H2O package documentation, ask for help:\n#>     > ??h2o\n#> \n#> After starting H2O, you can use the Web UI at http://localhost:54321\n#> For more information visit https://docs.h2o.ai\n#> \n#> ----------------------------------------------------------------------\n#> \n#> \n#> Attache Paket: 'h2o'\n#> \n#> Die folgenden Objekte sind maskiert von 'package:lubridate':\n#> \n#>     day, hour, month, week, year\n#> \n#> Die folgenden Objekte sind maskiert von 'package:stats':\n#> \n#>     cor, sd, var\n#> \n#> Die folgenden Objekte sind maskiert von 'package:base':\n#> \n#>     %*%, %in%, &&, ||, apply, as.factor, as.numeric, colnames,\n#>     colnames<-, ifelse, is.character, is.factor, is.numeric, log,\n#>     log10, log1p, log2, round, signif, trunc\n```\n:::\n\n```{.r .cell-code}\n# Load the data\nproduct_backorders_tbl <- read_csv(\"../../scripts/data/product_backorders.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Rows: 19053 Columns: 23\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr  (7): potential_issue, deck_risk, oe_constraint, ppap_risk, stop_auto_bu...\n#> dbl (16): sku, national_inv, lead_time, in_transit_qty, forecast_3_month, fo...\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n# Check for missing values and handle them\nproduct_backorders_tbl <- product_backorders_tbl %>%\n  mutate(across(everything(), ~ ifelse(is.na(.), -1, .)))\n\n# Check and adjust data types\nstr(product_backorders_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> tibble [19,053 × 23] (S3: tbl_df/tbl/data.frame)\n#>  $ sku              : num [1:19053] 1113121 1113268 1113874 1114222 1114823 ...\n#>  $ national_inv     : num [1:19053] 0 0 20 0 0 55 -34 4 2 -7 ...\n#>  $ lead_time        : num [1:19053] 8 8 2 8 12 8 8 9 8 8 ...\n#>  $ in_transit_qty   : num [1:19053] 1 0 0 0 0 0 0 0 0 0 ...\n#>  $ forecast_3_month : num [1:19053] 6 2 45 9 31 216 120 43 4 56 ...\n#>  $ forecast_6_month : num [1:19053] 6 3 99 14 31 360 240 67 6 96 ...\n#>  $ forecast_9_month : num [1:19053] 6 4 153 21 31 492 240 115 9 112 ...\n#>  $ sales_1_month    : num [1:19053] 0 1 16 5 7 30 83 5 1 13 ...\n#>  $ sales_3_month    : num [1:19053] 4 2 42 17 15 108 122 22 5 30 ...\n#>  $ sales_6_month    : num [1:19053] 9 3 80 36 33 275 144 40 6 56 ...\n#>  $ sales_9_month    : num [1:19053] 12 3 111 43 47 340 165 58 9 76 ...\n#>  $ min_bank         : num [1:19053] 0 0 10 0 2 51 33 4 2 0 ...\n#>  $ potential_issue  : chr [1:19053] \"No\" \"No\" \"No\" \"No\" ...\n#>  $ pieces_past_due  : num [1:19053] 1 0 0 0 3 0 0 0 0 0 ...\n#>  $ perf_6_month_avg : num [1:19053] 0.9 0.96 0.81 0.96 0.98 0 1 0.69 1 0.97 ...\n#>  $ perf_12_month_avg: num [1:19053] 0.89 0.97 0.88 0.98 0.98 0 0.97 0.68 0.95 0.92 ...\n#>  $ local_bo_qty     : num [1:19053] 0 0 0 0 0 0 34 0 0 7 ...\n#>  $ deck_risk        : chr [1:19053] \"No\" \"No\" \"No\" \"No\" ...\n#>  $ oe_constraint    : chr [1:19053] \"No\" \"No\" \"No\" \"No\" ...\n#>  $ ppap_risk        : chr [1:19053] \"No\" \"No\" \"No\" \"No\" ...\n#>  $ stop_auto_buy    : chr [1:19053] \"Yes\" \"Yes\" \"Yes\" \"Yes\" ...\n#>  $ rev_stop         : chr [1:19053] \"No\" \"No\" \"No\" \"No\" ...\n#>  $ went_on_backorder: chr [1:19053] \"Yes\" \"Yes\" \"Yes\" \"Yes\" ...\n```\n:::\n\n```{.r .cell-code}\n# Convert categorical variables to factors\nproduct_backorders_tbl <- product_backorders_tbl %>%\n  mutate(across(where(is.character), as.factor))\n\n# Split the data into training, validation, and test sets\nset.seed(1113)  # Setting seed for reproducibility\nsplit_obj <- rsample::initial_split(product_backorders_tbl, prop = c(0.7))\n\ntrain_tbl <- training(split_obj)\n#valid_tbl <- validation(split_obj)\ntest_tbl <- testing(split_obj)\n\n# Initialize H2O\nh2o.init()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n#> H2O is not running yet, starting it now...\n#> \n#> Note:  In case of errors look at the following log files:\n#>     C:\\Users\\Davis-PC\\AppData\\Local\\Temp\\Rtmp4S0Chb\\file2de0637573a/h2o_Davis_started_from_r.out\n#>     C:\\Users\\Davis-PC\\AppData\\Local\\Temp\\Rtmp4S0Chb\\file2de07e0077db/h2o_Davis_started_from_r.err\n#> \n#> \n#> Starting H2O JVM and connecting:  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         2 seconds 903 milliseconds \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.44.0.3 \n#>     H2O cluster version age:    6 months and 4 days \n#>     H2O cluster name:           H2O_started_from_R_Davis_byi702 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   7.98 GB \n#>     H2O cluster total cores:    20 \n#>     H2O cluster allowed cores:  20 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.3.3 (2024-02-29 ucrt)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning in h2o.clusterInfo(): \n#> Your H2O cluster version is (6 months and 4 days) old. There may be a newer version available.\n#> Please download and install the latest version from: https://h2o-release.s3.amazonaws.com/h2o/latest_stable.html\n```\n:::\n\n```{.r .cell-code}\n# Convert data frames to H2O objects\ntrain_h2o <- as.h2o(train_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\n#valid_h2o <- as.h2o(valid_tbl)\ntest_h2o <- as.h2o(test_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\n# Specify the response and predictor variables\ny <- \"went_on_backorder\"\nx <- setdiff(names(train_tbl), y)\n\n# Run AutoML\nautoml_models_h2o <- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  #validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 300,  # 5 minutes\n  nfolds            = 5\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n#> 15:35:33.606: AutoML: XGBoost is not available; skipping it.\n  |                                                                            \n  |==                                                                    |   2%\n  |                                                                            \n  |===                                                                   |   4%\n  |                                                                            \n  |====                                                                  |   6%\n  |                                                                            \n  |======                                                                |   8%\n  |                                                                            \n  |=========                                                             |  12%\n  |                                                                            \n  |=============                                                         |  18%\n  |                                                                            \n  |==============                                                        |  20%\n  |                                                                            \n  |================                                                      |  22%\n  |                                                                            \n  |====================                                                  |  28%\n  |                                                                            \n  |====================                                                  |  29%\n  |                                                                            \n  |=====================                                                 |  29%\n  |                                                                            \n  |=====================                                                 |  30%\n  |                                                                            \n  |=====================                                                 |  31%\n  |                                                                            \n  |======================                                                |  31%\n  |                                                                            \n  |======================                                                |  32%\n  |                                                                            \n  |=======================                                               |  32%\n  |                                                                            \n  |=======================                                               |  33%\n  |                                                                            \n  |========================                                              |  34%\n  |                                                                            \n  |=============================                                         |  42%\n  |                                                                            \n  |==============================                                        |  43%\n  |                                                                            \n  |================================                                      |  45%\n  |                                                                            \n  |==================================                                    |  49%\n  |                                                                            \n  |====================================                                  |  51%\n  |                                                                            \n  |======================================                                |  55%\n  |                                                                            \n  |=======================================                               |  56%\n  |                                                                            \n  |========================================                              |  57%\n  |                                                                            \n  |========================================                              |  58%\n  |                                                                            \n  |=========================================                             |  59%\n  |                                                                            \n  |==========================================                            |  60%\n  |                                                                            \n  |===========================================                           |  61%\n  |                                                                            \n  |=================================================                     |  70%\n  |                                                                            \n  |=================================================                     |  71%\n  |                                                                            \n  |====================================================                  |  74%\n  |                                                                            \n  |=====================================================                 |  75%\n  |                                                                            \n  |======================================================                |  77%\n  |                                                                            \n  |=======================================================               |  78%\n  |                                                                            \n  |==========================================================            |  83%\n  |                                                                            \n  |============================================================          |  86%\n  |                                                                            \n  |=============================================================         |  87%\n  |                                                                            \n  |================================================================      |  91%\n  |                                                                            \n  |=================================================================     |  93%\n  |                                                                            \n  |===================================================================   |  96%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\n# View the leaderboard\nleaderboard <- automl_models_h2o@leaderboard\nprint(leaderboard)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>                                                  model_id       auc   logloss\n#> 1    StackedEnsemble_AllModels_3_AutoML_1_20240625_153533 0.9551961 0.1662080\n#> 2    StackedEnsemble_AllModels_4_AutoML_1_20240625_153533 0.9551955 0.1662081\n#> 3    StackedEnsemble_AllModels_2_AutoML_1_20240625_153533 0.9542625 0.1673831\n#> 4 StackedEnsemble_BestOfFamily_4_AutoML_1_20240625_153533 0.9538441 0.1677118\n#> 5 StackedEnsemble_BestOfFamily_3_AutoML_1_20240625_153533 0.9532337 0.1693340\n#> 6    StackedEnsemble_AllModels_1_AutoML_1_20240625_153533 0.9530344 0.1696087\n#>       aucpr mean_per_class_error      rmse        mse\n#> 1 0.7509944            0.1507242 0.2238393 0.05010401\n#> 2 0.7509939            0.1507242 0.2238393 0.05010404\n#> 3 0.7451901            0.1446704 0.2249867 0.05061901\n#> 4 0.7430459            0.1692322 0.2243736 0.05034350\n#> 5 0.7376921            0.1579688 0.2256441 0.05091524\n#> 6 0.7412521            0.1443718 0.2264441 0.05127695\n#> \n#> [63 rows x 7 columns]\n```\n:::\n\n```{.r .cell-code}\n# Predict using the leader model\nleader_model <- automl_models_h2o@leader\npredictions <- h2o.predict(leader_model, newdata = test_h2o)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\n# Save the leader model\nmodel_path <- h2o.saveModel(object = leader_model, path = \"../../scripts/data/h2o_models\", force = TRUE)\nprint(model_path)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"C:\\\\Users\\\\Davis-PC\\\\OneDrive\\\\Dateien\\\\Master\\\\Aktuelle Module\\\\BusinessNTA\\\\Business Decisions with Machine Learning\\\\ss24-bdml-DavisR\\\\scripts\\\\data\\\\h2o_models\\\\StackedEnsemble_AllModels_3_AutoML_1_20240625_153533\"\n```\n:::\n\n```{.r .cell-code}\n# Shutdown H2O\nh2o.shutdown(prompt = FALSE)\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}